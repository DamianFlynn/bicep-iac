{ // Modified version of https://github.com/Azure/Azure-Network-Security/blob/master/Azure%20Firewall/Workbook%20-%20Azure%20Firewall%20Monitor%20Workbook/Azure%20Firewall_Gallery.json from commit a7b8e85 on 7 Apr 2021
  "displayName": "Azure Firewall",
  "content": {
    "version": "Notebook/1.0",
    "items": [
      {
        "type": 1,
        "name": "MainTitle",
        "content": {
          "json": "## Azure Firewall\r\n---"
        }
      },
      {
        "type": 11,
        "name": "MainLinks",
        "customWidth": "60",
        "content": {
          "version": "LinkItem/1.0",
          "style": "tabs",
          "links": [
            {
              "id": "20847ce8-91bc-4d8b-b878-a5a41c95c31c",
              "cellValue": "selectedTab",
              "linkTarget": "parameter",
              "linkLabel": "Overview",
              "subTarget": "AFOverview",
              "style": "link"
            },
            {
              "id": "f564709d-1658-46a1-8b44-892210e13017",
              "cellValue": "selectedTab",
              "linkTarget": "parameter",
              "linkLabel": "Application rules",
              "subTarget": "AFAppRule",
              "style": "link"
            },
            {
              "id": "1f6661e2-f873-4d56-879d-4d085d8cf1d4",
              "cellValue": "selectedTab",
              "linkTarget": "parameter",
              "linkLabel": "Network rules",
              "subTarget": "AFNetRule",
              "style": "link"
            },
            {
              "id": "ef1548c5-ef55-4eaa-8a81-b049cb93b56c",
              "cellValue": "selectedTab",
              "linkTarget": "parameter",
              "linkLabel": "DNS Proxy",
              "subTarget": "AFDNSProxy",
              "style": "link"
            },
            {
              "id": "18a4a585-2176-4d9f-907c-8e8d5f984efa",
              "cellValue": "selectedTab",
              "linkTarget": "parameter",
              "linkLabel": "IDPS (Premium)",
              "subTarget": "AFIDSIPS",
              "style": "link"
            }
          ]
        }
      },
      {
        "type": 9,
        "name": "MainParameters",
        "customWidth": "40",
        "content": {
          "version": "KqlParameterItem/1.0",
          "crossComponentResources": [
            "value::selected"
          ],
          "parameters": [
            {
              "id": "01afeffb-5ade-42b4-8ce9-e648b880e5a5",
              "version": "KqlParameterItem/1.0",
              "name": "TimeRange",
              "label": "Time range",
              "type": 4,
              "value": {
                "durationMs": 14400000
              },
              "isRequired": true,
              "isGlobal": true,
              "typeSettings": {
                "selectableValues": [
                  {
                    "durationMs": 300000
                  },
                  {
                    "durationMs": 900000
                  },
                  {
                    "durationMs": 1800000
                  },
                  {
                    "durationMs": 3600000
                  },
                  {
                    "durationMs": 14400000
                  },
                  {
                    "durationMs": 43200000
                  },
                  {
                    "durationMs": 86400000
                  },
                  {
                    "durationMs": 172800000
                  },
                  {
                    "durationMs": 259200000
                  },
                  {
                    "durationMs": 604800000
                  },
                  {
                    "durationMs": 1209600000
                  },
                  {
                    "durationMs": 2419200000
                  },
                  {
                    "durationMs": 2592000000
                  },
                  {
                    "durationMs": 5184000000
                  },
                  {
                    "durationMs": 7776000000
                  }
                ],
                "allowCustom": true
              }
            },
            {
              "id": "add90eb3-ff5f-4b19-9658-ff15c8043af5",
              "version": "KqlParameterItem/1.0",
              "name": "Workspaces",
              "label": "Workspaces",
              "type": 5,
              "isRequired": true,
              "multiSelect": true,
              "quote": "'",
              "delimiter": ",",
              "query": "where type =~ 'microsoft.operationalinsights/workspaces' | project id, name | sort by name asc",
              "crossComponentResources": [
                "value::selected"
              ],
              "typeSettings": {
                "additionalResourceOptions": [
                  "value::100"
                ],
                "showDefault": false
              },
              "defaultValue": "value::100",
              "queryType": 1,
              "resourceType": "microsoft.resourcegraph/resources"
            },
            {
              "id": "5084e141-6c56-4d7f-bd8a-09f7ef9af1bc",
              "version": "KqlParameterItem/1.0",
              "name": "Resource",
              "label": "Firewalls",
              "type": 5,
              "isRequired": true,
              "multiSelect": true,
              "quote": "'",
              "delimiter": ",",
              "query": "where type =~ 'Microsoft.Network/azureFirewalls' | project id, name | sort by name asc",
              "crossComponentResources": [
                "value::selected"
              ],
              "typeSettings": {
                "additionalResourceOptions": [
                  "value::100"
                ],
                "showDefault": false
              },
              "defaultValue": "value::100",
              "queryType": 1,
              "resourceType": "microsoft.resourcegraph/resources"
            }
          ],
          "style": "pills",
          "queryType": 0,
          "resourceType": "microsoft.operationalinsights/workspaces"
        }
      },
      {
        "type": 12,
        "name": "AFOverviewGroup",
        "content": {
          "version": "NotebookGroup/1.0",
          "groupType": "editable",
          "items": [
            {
              "type": 3,
              "name": "AFResourceQuery",
              "content": {
                "version": "KqlItem/1.0",
                "query": "where type =~ 'Microsoft.Network/azureFirewalls' | extend Tier = trim(' ', tostring(properties.sku.tier)) | extend Status = trim(' ', tostring(iif(isempty(properties.ipConfigurations.[0].properties.provisioningState), properties.provisioningState, properties.ipConfigurations.[0].properties.provisioningState))) | extend ProvisionedState = iff(Status == 'Succeeded', 'Running', 'Not running') | extend Policy = trim(' ', tostring(properties.firewallPolicy.id)) | extend ApplicationRule1 = trim(' ', tostring(properties.applicationRuleCollections.[0].id)) | extend ApplicationRule2 = trim(' ', tostring(properties.applicationRuleCollections.[0].id)) | extend ApplicationRule3 = iff(ApplicationRule1 == '', 'N/A', '') | extend ApplicationRule4 = iff(ApplicationRule2 contains 'subscription', 'Configured', '') | extend ApplicationRuleClassic = strcat(ApplicationRule3, ApplicationRule4) | extend NetworkRule1 = trim(' ', tostring(properties.networkRuleCollections.[0].id)) | extend NetworkRule2 = trim(' ', tostring(properties.networkRuleCollections.[0].id)) | extend NetworkRule3 = iff(NetworkRule1 == '', 'N/A', '') | extend NetworkRule4 = iff(NetworkRule1 contains 'subscription', 'Configured', '') | extend NetworkRuleClassic = strcat(NetworkRule3, NetworkRule4) | project Firewall = id, Tier, ProvisionedState, Policy, ApplicationRuleClassic, NetworkRuleClassic, Location = location, Tenant = tenantId",
                "size": 4,
                "showAnalytics": true,
                "queryType": 1,
                "resourceType": "microsoft.resourcegraph/resources",
                "crossComponentResources": [
                  "value::selected"
                ],
                "visualization": "table",
                "gridSettings": {
                  "formatters": [
                    {
                      "columnMatch": "ProvisionedState",
                      "formatter": 18,
                      "formatOptions": {
                        "thresholdsOptions": "colors",
                        "thresholdsGrid": [
                          {
                            "operator": "==",
                            "thresholdValue": "Running",
                            "representation": "green",
                            "text": "{0}{1}"
                          },
                          {
                            "operator": "==",
                            "thresholdValue": "Not Running",
                            "representation": "grayBlue",
                            "text": "{0}{1}"
                          },
                          {
                            "operator": "Default",
                            "thresholdValue": null,
                            "text": "{0}{1}"
                          }
                        ]
                      }
                    },
                    {
                      "columnMatch": "ApplicationRuleClassic",
                      "formatter": 18,
                      "formatOptions": {
                        "thresholdsOptions": "colors",
                        "thresholdsGrid": [
                          {
                            "operator": "==",
                            "thresholdValue": "N/A",
                            "representation": "gray",
                            "text": "{0}{1}"
                          },
                          {
                            "operator": "Default",
                            "thresholdValue": null,
                            "representation": "green",
                            "text": "{0}{1}"
                          }
                        ]
                      }
                    },
                    {
                      "columnMatch": "NetworkRuleClassic",
                      "formatter": 18,
                      "formatOptions": {
                        "thresholdsOptions": "colors",
                        "thresholdsGrid": [
                          {
                            "operator": "==",
                            "thresholdValue": "N/A",
                            "representation": "gray",
                            "text": "{0}{1}"
                          },
                          {
                            "operator": "Default",
                            "thresholdValue": null,
                            "representation": "green",
                            "text": "{0}{1}"
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            },
            {
              "type": 3,
              "name": "EventsByFirewall",
              "customWidth": "25",
              "content": {
                "version": "KqlItem/1.0",
                "query": "AzureDiagnostics | where ResourceType == 'AZUREFIREWALLS' | where ('{Resource:label}' !has ',' and Resource =~ '{Resource:label}') or ('{Resource:label}' has ',' and Resource in~ (split('{Resource:label}', ', '))) | summarize Volume = count() by Resource, bin(TimeGenerated, {TimeRange:grain})",
                "size": 0,
                "showAnalytics": true,
                "title": "Events by firewall ({$rowCount} in {$queryTime})",
                "noDataMessage": "Found no firewall events. Verify that logging has been enabled for Azure Firewall into selected workspace.",
                "noDataMessageStyle": 4,
                "timeContext": {
                  "durationMs": 14400000
                },
                "timeContextFromParameter": "TimeRange",
                "queryType": 0,
                "resourceType": "microsoft.operationalinsights/workspaces",
                "crossComponentResources": [
                  "{Workspaces}"
                ],
                "visualization": "linechart",
                "tileSettings": {
                  "titleContent": {
                    "columnMatch": "Resource",
                    "formatter": 1
                  },
                  "leftContent": {
                    "columnMatch": "amount",
                    "formatter": 12,
                    "formatOptions": {
                      "palette": "auto"
                    },
                    "numberFormat": {
                      "unit": 17,
                      "options": {
                        "maximumSignificantDigits": 3,
                        "maximumFractionDigits": 2
                      }
                    }
                  },
                  "showBorder": true
                }
              }
            },
            {
              "type": 3,
              "name": "EventCategoriesByTime",
              "customWidth": "50",
              "content": {
                "version": "KqlItem/1.0",
                "query": "AzureDiagnostics | where ResourceType == 'AZUREFIREWALLS' | extend Category = iif(OperationName in~ ('AzureFirewallIDSLog', 'AzureFirewallThreatIntelLog'), OperationName, Category) | summarize Volume = count() by Category, bin(TimeGenerated, {TimeRange:grain}) | sort by Volume desc",
                "size": 0,
                "showAnalytics": true,
                "title": "Event categories ({$rowCount} in {$queryTime})",
                "noDataMessage": "Found no firewall events. Verify that logging has been enabled for Azure Firewall into selected workspace.",
                "noDataMessageStyle": 4,
                "timeContext": {
                  "durationMs": 14400000
                },
                "timeContextFromParameter": "TimeRange",
                "queryType": 0,
                "resourceType": "microsoft.operationalinsights/workspaces",
                "crossComponentResources": [
                  "{Workspaces}"
                ],
                "visualization": "timechart"
              }
            },
            {
              "type": 3,
              "name": "EventsByCategoryQuery",
              "customWidth": "25",
              "content": {
                "version": "KqlItem/1.0",
                "query": "AzureDiagnostics | where ResourceType == 'AZUREFIREWALLS' | extend Category = iif(OperationName in~ ('AzureFirewallIDSLog', 'AzureFirewallThreatIntelLog'), OperationName, Category) | summarize Volume = count() by Category | sort by Volume desc",
                "size": 0,
                "showAnalytics": true,
                "title": "Events by category ({$rowCount} in {$queryTime})",
                "noDataMessage": "Found no firewall events. Verify that logging has been enabled for Azure Firewall into selected workspace.",
                "noDataMessageStyle": 4,
                "timeContext": {
                  "durationMs": 14400000
                },
                "timeContextFromParameter": "TimeRange",
                "queryType": 0,
                "resourceType": "microsoft.operationalinsights/workspaces",
                "crossComponentResources": [
                  "{Workspaces}"
                ],
                "visualization": "piechart",
                "tileSettings": {
                  "showBorder": false,
                  "titleContent": {
                    "columnMatch": "Category",
                    "formatter": 1
                  },
                  "leftContent": {
                    "columnMatch": "Volume",
                    "formatter": 12,
                    "formatOptions": {
                      "palette": "auto"
                    },
                    "numberFormat": {
                      "unit": 17,
                      "options": {
                        "maximumSignificantDigits": 3,
                        "maximumFractionDigits": 2
                      }
                    }
                  }
                }
              }
            },
            {
              "type": 10,
              "name": "FirewallHealthMetric",
              "customWidth": "25",
              "content": {
                "chartId": "workbook76864ed5-dd34-42d0-ae35-f3db9f9e8f15",
                "version": "MetricsItem/2.0",
                "size": 1,
                "chartType": 3,
                "resourceType": "microsoft.network/azurefirewalls",
                "metricScope": 0,
                "resourceParameter": "Resource",
                "resourceIds": [
                  "{Resource}"
                ],
                "timeContextFromParameter": "TimeRange",
                "timeContext": {
                  "durationMs": 0
                },
                "metrics": [
                  {
                    "namespace": "microsoft.network/azurefirewalls",
                    "metric": "microsoft.network/azurefirewalls--FirewallHealth",
                    "aggregation": 4,
                    "splitBy": null,
                    "columnName": "Health"
                  }
                ],
                "title": "Health",
                "showOpenInMe": true,
                "showCreateAlertRule": true
              }
            },
            {
              "type": 10,
              "customWidth": "25",
              "name": "SNATPortUtilizationMetric",
              "content": {
                "chartId": "workbook76864ed5-dd34-42d0-ae35-f3db9f9e8f15",
                "version": "MetricsItem/2.0",
                "size": 1,
                "chartType": 3,
                "resourceType": "microsoft.network/azurefirewalls",
                "metricScope": 0,
                "resourceParameter": "Resource",
                "resourceIds": [
                  "{Resource}"
                ],
                "timeContextFromParameter": "TimeRange",
                "timeContext": {
                  "durationMs": 0
                },
                "metrics": [
                  {
                    "namespace": "microsoft.network/azurefirewalls",
                    "metric": "microsoft.network/azurefirewalls--SNATPortUtilization",
                    "aggregation": 4,
                    "splitBy": null
                  }
                ],
                "title": "SNAT port utilization",
                "showOpenInMe": true,
                "showCreateAlertRule": true
              }
            },
            {
              "type": 10,
              "name": "ThroughputMetric",
              "customWidth": "25",
              "content": {
                "chartId": "workbook76864ed5-dd34-42d0-ae35-f3db9f9e8f15",
                "version": "MetricsItem/2.0",
                "size": 1,
                "chartType": 3,
                "resourceType": "microsoft.network/azurefirewalls",
                "metricScope": 0,
                "resourceParameter": "Resource",
                "resourceIds": [
                  "{Resource}"
                ],
                "timeContextFromParameter": "TimeRange",
                "timeContext": {
                  "durationMs": 0
                },
                "metrics": [
                  {
                    "namespace": "microsoft.network/azurefirewalls",
                    "metric": "microsoft.network/azurefirewalls--Throughput",
                    "aggregation": 4,
                    "splitBy": null,
                    "columnName": "Throughput"
                  }
                ],
                "title": "Throughput",
                "showOpenInMe": true,
                "showCreateAlertRule": true
              }
            },
            {
              "type": 10,
              "name": "DataProcessedMetric",
              "customWidth": "25",
              "content": {
                "chartId": "workbook76864ed5-dd34-42d0-ae35-f3db9f9e8f15",
                "version": "MetricsItem/2.0",
                "size": 1,
                "chartType": 3,
                "resourceType": "microsoft.network/azurefirewalls",
                "metricScope": 0,
                "resourceParameter": "Resource",
                "resourceIds": [
                  "{Resource}"
                ],
                "timeContextFromParameter": "TimeRange",
                "timeContext": {
                  "durationMs": 0
                },
                "metrics": [
                  {
                    "namespace": "microsoft.network/azurefirewalls",
                    "metric": "microsoft.network/azurefirewalls--DataProcessed",
                    "aggregation": 4,
                    "splitBy": null,
                    "columnName": "Data processed"
                  }
                ],
                "title": "Data processed",
                "showOpenInMe": true,
                "showCreateAlertRule": true
              }
            },
            {
              "type": 10,
              "name": "ApplicationRuleHitMetric",
              "customWidth": "50",
              "content": {
                "chartId": "workbook76864ed5-dd34-42d0-ae35-f3db9f9e8f15",
                "version": "MetricsItem/2.0",
                "size": 1,
                "chartType": 3,
                "resourceType": "microsoft.network/azurefirewalls",
                "metricScope": 0,
                "resourceParameter": "Resource",
                "resourceIds": [
                  "{Resource}"
                ],
                "timeContextFromParameter": "TimeRange",
                "timeContext": {
                  "durationMs": 0
                },
                "metrics": [
                  {
                    "namespace": "microsoft.network/azurefirewalls",
                    "metric": "microsoft.network/azurefirewalls--ApplicationRuleHit",
                    "aggregation": 1,
                    "splitBy": null
                  }
                ],
                "title": "Application rule hit count",
                "showOpenInMe": true,
                "showCreateAlertRule": true
              }
            },
            {
              "type": 10,
              "name": "NetworkRuleHitMetric",
              "customWidth": "50",
              "content": {
                "chartId": "workbook76864ed5-dd34-42d0-ae35-f3db9f9e8f15",
                "version": "MetricsItem/2.0",
                "size": 1,
                "chartType": 3,
                "resourceType": "microsoft.network/azurefirewalls",
                "metricScope": 0,
                "resourceParameter": "Resource",
                "resourceIds": [
                  "{Resource}"
                ],
                "timeContextFromParameter": "TimeRange",
                "timeContext": {
                  "durationMs": 0
                },
                "metrics": [
                  {
                    "namespace": "microsoft.network/azurefirewalls",
                    "metric": "microsoft.network/azurefirewalls--NetworkRuleHit",
                    "aggregation": 1,
                    "splitBy": null
                  }
                ],
                "title": "Network rule hit count",
                "showOpenInMe": true,
                "showCreateAlertRule": true
              }
            }
          ]
        },
        "conditionalVisibility": {
          "parameterName": "selectedTab",
          "comparison": "isEqualTo",
          "value": "AFOverview"
        }
      },
      {
        "type": 12,
        "name": "AFAppRuleGroup",
        "content": {
          "version": "NotebookGroup/1.0",
          "groupType": "editable",
          "items": [
            {
              "type": 11,
              "name": "AppRuleLinks",
              "content": {
                "version": "LinkItem/1.0",
                "style": "tabs",
                "links": [
                  {
                    "id": "46f500b8-06d6-4b5d-8e2b-280b218124d6",
                    "cellValue": "selectedAppRuleTab",
                    "linkTarget": "parameter",
                    "linkLabel": "Search",
                    "subTarget": "Search",
                    "style": "link"
                  },
                  {
                    "id": "01e8652a-e2ed-4154-ae62-0db811131337",
                    "cellValue": "selectedAppRuleTab",
                    "linkTarget": "parameter",
                    "linkLabel": "Statistics",
                    "subTarget": "Statistics",
                    "style": "link"
                  },
                  {
                    "id": "4e1e983f-df0e-4a2b-84b8-f7c42a53f4ad",
                    "cellValue": "selectedAppRuleTab",
                    "linkTarget": "parameter",
                    "linkLabel": "Web categories",
                    "subTarget": "WebCategories",
                    "style": "link"
                  }
                ]
              }
            },
            {
              "type": 3,
              "name": "AFAppSelectedRuleQuery",
              "customWidth": "40",
              "content": {
                "version": "KqlItem/1.0",
                "query": "AzureDiagnostics | where ResourceType == 'AZUREFIREWALLS' and Category == 'AzureFirewallApplicationRule' and OperationName == 'AzureFirewallApplicationRuleLog' | where ('{Resource:label}' !has ',' and Resource =~ '{Resource:label}') or ('{Resource:label}' has ',' and Resource in~ (split('{Resource:label}', ', '))) | extend Protocol = extract(@'^([\\S]+)', 1, msg_s), Source = extract(@'request from ([^ :]+)', 1, msg_s), SourcePort = extract(@'request from ([^ :]+):([0-9]+)', 2, msg_s), Destination = extract(@'request from ([^ :]+):([0-9]+) to ([^ :]+)', 3, msg_s), DestinationPort = extract(@'request from ([^ :]+):([0-9]+) to ([^ :]+):([0-9]+)', 4, msg_s), Url = trim_end(@'\\.', extract(@'Url: ([\\S]+)', 1, msg_s)), Action = extract(@'Action: ([\\w]+)', 1, msg_s), Policy = trim_end(@'\\.', extract(@'Policy: ([\\S]+)', 1, msg_s)), RuleCollectionGroup = trim_end(@'\\.', extract(@'Rule Collection Group: ([\\S]+)', 1, msg_s)), RuleCollection = trim_end(@'\\.', extract(@'Rule Collection: ([\\S]+)', 1, msg_s)), Rule = trim_end(@'\\.', extract(@'Rule: ([\\S]+)', 1, msg_s)), WebCategory = trim_end(@'\\.', extract(@'Web Category: ([\\S]+)', 1, msg_s)), Reason = extract(@'Reason: ([^\\.]+)(\\.)', 1, msg_s), Firewall = Resource | extend Rule = iif(isempty(Rule), 'No rule matched', Rule) | summarize Hits = count(), LastLog = datetime_diff('second', now(), max(TimeGenerated)) by Rule | project Hits, Rule, LastLog | sort by Hits desc",
                "size": 1,
                "showAnalytics": true,
                "showExportToExcel": true,
                "title": "Select application rule ({$rowCount} in {$queryTime})",
                "noDataMessage": "Found no matching events.",
                "noDataMessageStyle": 2,
                "timeContext": {
                  "durationMs": 14400000
                },
                "timeContextFromParameter": "TimeRange",
                "exportMultipleValues": true,
                "exportedParameters": [
                  {
                    "fieldName": "Rule",
                    "parameterName": "SelectedRule",
                    "parameterType": 1,
                    "quote": "",
                    "delimiter": ","
                  }
                ],
                "queryType": 0,
                "resourceType": "microsoft.operationalinsights/workspaces",
                "crossComponentResources": [
                  "{Workspaces}"
                ],
                "gridSettings": {
                  "formatters": [
                    {
                      "columnMatch": "Hits",
                      "formatter": 8,
                      "formatOptions": {
                        "palette": "whiteBlack"
                      },
                      "numberFormat": {
                        "unit": 17,
                        "options": {
                          "style": "decimal",
                          "useGrouping": false,
                          "maximumSignificantDigits": 4
                        }
                      }
                    },
                    {
                      "columnMatch": "LastLog",
                      "formatter": 8,
                      "formatOptions": {
                        "palette": "greenRed"
                      },
                      "numberFormat": {
                        "unit": 24,
                        "options": {
                          "style": "decimal",
                          "useGrouping": false,
                          "minimumIntegerDigits": 2,
                          "minimumFractionDigits": 3,
                          "maximumFractionDigits": 3,
                          "minimumSignificantDigits": 3,
                          "maximumSignificantDigits": 3
                        }
                      }
                    }
                  ],
                  "filter": true
                },
                "sortBy": []
              }
            },
            {
              "type": 3,
              "name": "AFAppSelectedSourceQuery",
              "customWidth": "30",
              "content": {
                "version": "KqlItem/1.0",
                "query": "AzureDiagnostics | where ResourceType == 'AZUREFIREWALLS' and Category == 'AzureFirewallApplicationRule' and OperationName == 'AzureFirewallApplicationRuleLog' | where ('{Resource:label}' !has ',' and Resource =~ '{Resource:label}') or ('{Resource:label}' has ',' and Resource in~ (split('{Resource:label}', ', '))) | extend Protocol = extract(@'^([\\S]+)', 1, msg_s), Source = extract(@'request from ([^ :]+)', 1, msg_s), SourcePort = extract(@'request from ([^ :]+):([0-9]+)', 2, msg_s), Destination = extract(@'request from ([^ :]+):([0-9]+) to ([^ :]+)', 3, msg_s), DestinationPort = extract(@'request from ([^ :]+):([0-9]+) to ([^ :]+):([0-9]+)', 4, msg_s), Url = trim_end(@'\\.', extract(@'Url: ([\\S]+)', 1, msg_s)), Action = extract(@'Action: ([\\w]+)', 1, msg_s), Policy = trim_end(@'\\.', extract(@'Policy: ([\\S]+)', 1, msg_s)), RuleCollectionGroup = trim_end(@'\\.', extract(@'Rule Collection Group: ([\\S]+)', 1, msg_s)), RuleCollection = trim_end(@'\\.', extract(@'Rule Collection: ([\\S]+)', 1, msg_s)), Rule = trim_end(@'\\.', extract(@'Rule: ([\\S]+)', 1, msg_s)), WebCategory = trim_end(@'\\.', extract(@'Web Category: ([\\S]+)', 1, msg_s)), Reason = extract(@'Reason: ([^\\.]+)(\\.)', 1, msg_s), Firewall = Resource | join kind=leftouter (AzureNetworkAnalytics_CL | where SubType_s == 'Topology' and ResourceType in ('NetworkInterface', 'ApplicationGateway', 'VirtualNetworkGateway', 'LoadBalancer') | extend RGandName = split(iif(ResourceType == 'NetworkInterface' and isnotnull(VirtualMachine_s), VirtualMachine_s, Name_s), '/') | extend IPResourceId = strcat('/subscriptions/', Subscription_g, '/resourceGroups/', RGandName[0], '/providers/', iif(ResourceType == 'NetworkInterface' and isnotnull(VirtualMachine_s), 'Microsoft.Compute/virtualMachines/', strcat('Microsoft.Network/', ResourceType, 's/')), RGandName[1]) | extend IP = pack_array(PrivateFrontendIPs_s, PublicFrontendIPs_s, VIPAddress_s, PrivateIPAddresses_s, PublicIPAddresses_s, PublicIPs_s) | mv-expand IP | where isnotempty(IP) | summarize by IPResourceId, tostring(IP)) on $left.Source == $right.IP | extend Rule = iif(isempty(Rule), 'No rule matched', Rule) | where isempty('{SelectedRule}') or ('{SelectedRule}' !has ',' and Rule =~ '{SelectedRule}') or ('{SelectedRule}' has ',' and Rule in~ (split('{SelectedRule}', ','))) | summarize Hits = count() by Source, IPResourceId | project Hits, Source, Resource = IPResourceId | sort by Hits desc",
                "size": 1,
                "showAnalytics": true,
                "showExportToExcel": true,
                "title": "Select source ({$rowCount} in {$queryTime})",
                "noDataMessage": "Found no matching events.",
                "noDataMessageStyle": 2,
                "timeContext": {
                  "durationMs": 14400000
                },
                "timeContextFromParameter": "TimeRange",
                "exportMultipleValues": true,
                "exportedParameters": [
                  {
                    "fieldName": "Source",
                    "parameterName": "SelectedSource",
                    "parameterType": 1,
                    "quote": "",
                    "delimiter": ","
                  }
                ],
                "queryType": 0,
                "resourceType": "microsoft.operationalinsights/workspaces",
                "crossComponentResources": [
                  "{Workspaces}"
                ],
                "gridSettings": {
                  "formatters": [
                    {
                      "columnMatch": "Hits",
                      "formatter": 8,
                      "formatOptions": {
                        "palette": "whiteBlack"
                      },
                      "numberFormat": {
                        "unit": 17,
                        "options": {
                          "style": "decimal",
                          "useGrouping": false,
                          "maximumSignificantDigits": 4
                        }
                      }
                    }
                  ],
                  "rowLimit": 10000,
                  "filter": true
                }
              }
            },
            {
              "type": 3,
              "name": "AFAppSelectedDestinationQuery",
              "customWidth": "30",
              "content": {
                "version": "KqlItem/1.0",
                "query": "AzureDiagnostics | where ResourceType == 'AZUREFIREWALLS' and Category == 'AzureFirewallApplicationRule' and OperationName == 'AzureFirewallApplicationRuleLog' | where ('{Resource:label}' !has ',' and Resource =~ '{Resource:label}') or ('{Resource:label}' has ',' and Resource in~ (split('{Resource:label}', ', '))) | extend Protocol = extract(@'^([\\S]+)', 1, msg_s), Source = extract(@'request from ([^ :]+)', 1, msg_s), SourcePort = extract(@'request from ([^ :]+):([0-9]+)', 2, msg_s), Destination = extract(@'request from ([^ :]+):([0-9]+) to ([^ :]+)', 3, msg_s), DestinationPort = extract(@'request from ([^ :]+):([0-9]+) to ([^ :]+):([0-9]+)', 4, msg_s), Url = trim_end(@'\\.', extract(@'Url: ([\\S]+)', 1, msg_s)), Action = extract(@'Action: ([\\w]+)', 1, msg_s), Policy = trim_end(@'\\.', extract(@'Policy: ([\\S]+)', 1, msg_s)), RuleCollectionGroup = trim_end(@'\\.', extract(@'Rule Collection Group: ([\\S]+)', 1, msg_s)), RuleCollection = trim_end(@'\\.', extract(@'Rule Collection: ([\\S]+)', 1, msg_s)), Rule = trim_end(@'\\.', extract(@'Rule: ([\\S]+)', 1, msg_s)), WebCategory = trim_end(@'\\.', extract(@'Web Category: ([\\S]+)', 1, msg_s)), Reason = extract(@'Reason: ([^\\.]+)(\\.)', 1, msg_s), Firewall = Resource | extend Rule = iif(isempty(Rule), 'No rule matched', Rule) | where isempty('{SelectedRule}') or ('{SelectedRule}' !has ',' and Rule =~ '{SelectedRule}') or ('{SelectedRule}' has ',' and Rule in~ (split('{SelectedRule}', ','))) | where isempty('{SelectedSource}') or ('{SelectedSource}' !has ',' and Source =~ '{SelectedSource}') or ('{SelectedSource}' has ',' and Source in~ (split('{SelectedSource}', ','))) | summarize Hits = count() by Destination | project Hits, Destination | sort by Hits desc",
                "size": 1,
                "showAnalytics": true,
                "showExportToExcel": true,
                "title": "Select destination ({$rowCount} in {$queryTime})",
                "noDataMessage": "Found no matching events.",
                "noDataMessageStyle": 2,
                "timeContext": {
                  "durationMs": 14400000
                },
                "timeContextFromParameter": "TimeRange",
                "exportMultipleValues": true,
                "exportedParameters": [
                  {
                    "fieldName": "Destination",
                    "parameterName": "SelectedDestination",
                    "parameterType": 1,
                    "quote": "",
                    "delimiter": ","
                  }
                ],
                "queryType": 0,
                "resourceType": "microsoft.operationalinsights/workspaces",
                "crossComponentResources": [
                  "{Workspaces}"
                ],
                "gridSettings": {
                  "formatters": [
                    {
                      "columnMatch": "Hits",
                      "formatter": 8,
                      "formatOptions": {
                        "palette": "whiteBlack"
                      },
                      "numberFormat": {
                        "unit": 17,
                        "options": {
                          "style": "decimal",
                          "useGrouping": false,
                          "maximumSignificantDigits": 4
                        }
                      }
                    }
                  ],
                  "rowLimit": 10000,
                  "filter": true
                }
              }
            },
            {
              "type": 9,
              "name": "AppRuleLogSearchParameters",
              "content": {
                "version": "KqlParameterItem/1.0",
                "parameters": [
                  {
                    "id": "74974f5f-f065-4302-a70f-d573f2b08348",
                    "version": "KqlParameterItem/1.0",
                    "name": "AFAction",
                    "label": "Action",
                    "type": 10,
                    "isRequired": true,
                    "value": "All",
                    "typeSettings": {
                      "additionalResourceOptions": [],
                      "showDefault": false
                    },
                    "jsonData": "[\"All\",\"Allow\",\"Deny\"]",
                    "timeContext": {
                      "durationMs": 0
                    },
                    "timeContextFromParameter": "TimeRange"
                  },
                  {
                    "id": "bb7368a1-920d-4adf-99b4-4ed003a2a871",
                    "version": "KqlParameterItem/1.0",
                    "name": "AFSourcePort",
                    "label": "SourcePort",
                    "type": 2,
                    "isRequired": true,
                    "query": "AzureDiagnostics | where ResourceType == 'AZUREFIREWALLS' and Category == 'AzureFirewallApplicationRule' and OperationName == 'AzureFirewallApplicationRuleLog' and msg_s matches regex @'request from ([^ :]+):([0-9]+)' | where ('{Resource:label}' !has ',' and Resource =~ '{Resource:label}') or ('{Resource:label}' has ',' and Resource in~ (split('{Resource:label}', ', '))) | extend SourcePort = extract(@'request from ([^ :]+):([0-9]+)', 2, msg_s) | summarize by SourcePort | sort by SourcePort asc",
                    "typeSettings": {
                      "additionalResourceOptions": [
                        "value::all"
                      ],
                      "selectAllValue": "All",
                      "showDefault": false
                    },
                    "timeContext": {
                      "durationMs": 14400000
                    },
                    "timeContextFromParameter": "TimeRange",
                    "defaultValue": "value::all",
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "crossComponentResources": [
                      "{Workspaces}"
                    ]
                  },
                  {
                    "id": "9d4641ac-17c5-4b33-b132-87a7a990541d",
                    "version": "KqlParameterItem/1.0",
                    "name": "AFDestinationPort",
                    "label": "DestinationPort",
                    "type": 2,
                    "isRequired": true,
                    "query": "AzureDiagnostics | where ResourceType == 'AZUREFIREWALLS' and Category == 'AzureFirewallApplicationRule' and OperationName == 'AzureFirewallApplicationRuleLog' and msg_s matches regex @'request from ([^ :]+):([0-9]+) to ([^ :]+):([0-9]+)' | where ('{Resource:label}' !has ',' and Resource =~ '{Resource:label}') or ('{Resource:label}' has ',' and Resource in~ (split('{Resource:label}', ', '))) | extend DestinationPort = extract(@'request from ([^ :]+):([0-9]+) to ([^ :]+):([0-9]+)', 4, msg_s) | summarize by DestinationPort | sort by DestinationPort asc",
                    "typeSettings": {
                      "additionalResourceOptions": [
                        "value::all"
                      ],
                      "selectAllValue": "All",
                      "showDefault": false
                    },
                    "timeContext": {
                      "durationMs": 14400000
                    },
                    "timeContextFromParameter": "TimeRange",
                    "defaultValue": "value::all",
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "crossComponentResources": [
                      "{Workspaces}"
                    ]
                  },
                  {
                    "id": "00b0f8bf-b9e0-40bb-ae57-6813bf5a1612",
                    "version": "KqlParameterItem/1.0",
                    "name": "AFProtocol",
                    "label": "Protocol",
                    "type": 2,
                    "isRequired": true,
                    "query": "AzureDiagnostics | where ResourceType == 'AZUREFIREWALLS' and Category == 'AzureFirewallApplicationRule' and OperationName == 'AzureFirewallApplicationRuleLog' | where ('{Resource:label}' !has ',' and Resource =~ '{Resource:label}') or ('{Resource:label}' has ',' and Resource in~ (split('{Resource:label}', ', '))) | extend Protocol = extract(@'^([\\S]+)', 1, msg_s) | summarize by Protocol | sort by Protocol asc",
                    "typeSettings": {
                      "additionalResourceOptions": [
                        "value::all"
                      ],
                      "selectAllValue": "All",
                      "showDefault": false
                    },
                    "timeContext": {
                      "durationMs": 14400000
                    },
                    "timeContextFromParameter": "TimeRange",
                    "defaultValue": "value::all",
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "crossComponentResources": [
                      "{Workspaces}"
                    ]
                  }
                ],
                "style": "pills",
                "queryType": 0,
                "resourceType": "microsoft.operationalinsights/workspaces"
              },
              "conditionalVisibility": {
                "parameterName": "selectedAppRuleTab",
                "comparison": "isEqualTo",
                "value": "Search"
              }
            },
            {
              "type": 3,
              "name": "AppRuleSearchQuery",
              "content": {
                "version": "KqlItem/1.0",
                "query": "AzureDiagnostics | where ResourceType == 'AZUREFIREWALLS' and Category == 'AzureFirewallApplicationRule' and OperationName == 'AzureFirewallApplicationRuleLog' | where ('{Resource:label}' !has ',' and Resource =~ '{Resource:label}') or ('{Resource:label}' has ',' and Resource in~ (split('{Resource:label}', ', '))) | extend Protocol = extract(@'^([\\S]+)', 1, msg_s), Source = extract(@'request from ([^ :]+)', 1, msg_s), SourcePort = extract(@'request from ([^ :]+):([0-9]+)', 2, msg_s), Destination = extract(@'request from ([^ :]+):([0-9]+) to ([^ :]+)', 3, msg_s), DestinationPort = extract(@'request from ([^ :]+):([0-9]+) to ([^ :]+):([0-9]+)', 4, msg_s), Url = trim_end(@'\\.', extract(@'Url: ([\\S]+)', 1, msg_s)), Action = extract(@'Action: ([\\w]+)', 1, msg_s), Policy = trim_end(@'\\.', extract(@'Policy: ([\\S]+)', 1, msg_s)), RuleCollectionGroup = trim_end(@'\\.', extract(@'Rule Collection Group: ([\\S]+)', 1, msg_s)), RuleCollection = trim_end(@'\\.', extract(@'Rule Collection: ([\\S]+)', 1, msg_s)), Rule = trim_end(@'\\.', extract(@'Rule: ([\\S]+)', 1, msg_s)), WebCategory = trim_end(@'\\.', extract(@'Web Category: ([\\S]+)', 1, msg_s)), Reason = extract(@'Reason: ([^\\.]+)(\\.)', 1, msg_s), Firewall = Resource | extend Rule = iif(isempty(Rule), 'No rule matched', Rule) | where isempty('{SelectedRule}') or ('{SelectedRule}' !has ',' and Rule =~ '{SelectedRule}') or ('{SelectedRule}' has ',' and Rule in~ (split('{SelectedRule}', ','))) | where isempty('{SelectedSource}') or ('{SelectedSource}' !has ',' and Source =~ '{SelectedSource}') or ('{SelectedSource}' has ',' and Source in~ (split('{SelectedSource}', ','))) | where isempty('{SelectedDestination}') or ('{SelectedDestination}' !has ',' and Destination =~ '{SelectedDestination}') or ('{SelectedDestination}' has ',' and Destination in~ (split('{SelectedDestination}', ','))) | where '{AFAction:label}' == 'All' or Action == '{AFAction:label}' | where '{AFSourcePort:label}' == 'All' or SourcePort == '{AFSourcePort:label}' | where '{AFDestinationPort:label}' == 'All' or DestinationPort == '{AFDestinationPort:label}' | where '{AFProtocol:label}' == 'All' or Protocol == '{AFProtocol:label}' | summarize by TimeGenerated, Firewall, Rule, Action, Source, SourcePort, Destination, DestinationPort, Protocol, Reason, RuleCollection, RuleCollectionGroup, Policy, WebCategory, LogMessage = msg_s | sort by TimeGenerated desc",
                "size": 2,
                "showAnalytics": true,
                "showExportToExcel": true,
                "title": "Firewall application rule log ({$rowCount} in {$queryTime})",
                "noDataMessage": "Found no matching events.",
                "noDataMessageStyle": 2,
                "timeContext": {
                  "durationMs": 14400000
                },
                "timeContextFromParameter": "TimeRange",
                "queryType": 0,
                "resourceType": "microsoft.operationalinsights/workspaces",
                "crossComponentResources": [
                  "{Workspaces}"
                ],
                "gridSettings": {
                  "rowLimit": 10000,
                  "filter": true
                }
              },
              "conditionalVisibility": {
                "parameterName": "selectedAppRuleTab",
                "comparison": "isEqualTo",
                "value": "Search"
              }
            },
            {
              "type": 3,
              "name": "AFAppActionPieQuery",
              "customWidth": "25",
              "content": {
                "version": "KqlItem/1.0",
                "query": "AzureDiagnostics | where ResourceType == 'AZUREFIREWALLS' and Category == 'AzureFirewallApplicationRule' and OperationName == 'AzureFirewallApplicationRuleLog' | where ('{Resource:label}' !has ',' and Resource =~ '{Resource:label}') or ('{Resource:label}' has ',' and Resource in~ (split('{Resource:label}', ', '))) | extend Protocol = extract(@'^([\\S]+)', 1, msg_s), Source = extract(@'request from ([^ :]+)', 1, msg_s), SourcePort = extract(@'request from ([^ :]+):([0-9]+)', 2, msg_s), Destination = extract(@'request from ([^ :]+):([0-9]+) to ([^ :]+)', 3, msg_s), DestinationPort = extract(@'request from ([^ :]+):([0-9]+) to ([^ :]+):([0-9]+)', 4, msg_s), Url = trim_end(@'\\.', extract(@'Url: ([\\S]+)', 1, msg_s)), Action = extract(@'Action: ([\\w]+)', 1, msg_s), Policy = trim_end(@'\\.', extract(@'Policy: ([\\S]+)', 1, msg_s)), RuleCollectionGroup = trim_end(@'\\.', extract(@'Rule Collection Group: ([\\S]+)', 1, msg_s)), RuleCollection = trim_end(@'\\.', extract(@'Rule Collection: ([\\S]+)', 1, msg_s)), Rule = trim_end(@'\\.', extract(@'Rule: ([\\S]+)', 1, msg_s)), WebCategory = trim_end(@'\\.', extract(@'Web Category: ([\\S]+)', 1, msg_s)), Reason = extract(@'Reason: ([^\\.]+)(\\.)', 1, msg_s), Firewall = Resource | where isempty('{SelectedSource}') or ('{SelectedSource}' !has ',' and Source =~ '{SelectedSource}') or ('{SelectedSource}' has ',' and Source in~ (split('{SelectedSource}', ','))) | where isempty('{SelectedDestination}') or ('{SelectedDestination}' !has ',' and Destination =~ '{SelectedDestination}') or ('{SelectedDestination}' has ',' and Destination in~ (split('{SelectedDestination}', ','))) | extend Rule = iif(isempty(Rule), 'No rule matched', Rule) | where isempty('{SelectedRule}') or ('{SelectedRule}' !has ',' and Rule =~ '{SelectedRule}') or ('{SelectedRule}' has ',' and Rule in~ (split('{SelectedRule}', ','))) | summarize Hits = count() by Action | project Hits, Action | sort by Hits desc",
                "size": 0,
                "showAnalytics": true,
                "title": "Hits by action ({$rowCount} in {$queryTime})",
                "noDataMessage": "Found no matching events.",
                "noDataMessageStyle": 2,
                "timeContext": {
                  "durationMs": 0
                },
                "timeContextFromParameter": "TimeRange",
                "queryType": 0,
                "resourceType": "microsoft.operationalinsights/workspaces",
                "crossComponentResources": [
                  "{Workspaces}"
                ],
                "visualization": "piechart"
              },
              "conditionalVisibility": {
                "parameterName": "selectedAppRuleTab",
                "comparison": "isEqualTo",
                "value": "Statistics"
              }
            },
            {
              "type": 3,
              "name": "AFAppProtocolPieQuery",
              "customWidth": "25",
              "content": {
                "version": "KqlItem/1.0",
                "query": "AzureDiagnostics | where ResourceType == 'AZUREFIREWALLS' and Category == 'AzureFirewallApplicationRule' and OperationName == 'AzureFirewallApplicationRuleLog' | where ('{Resource:label}' !has ',' and Resource =~ '{Resource:label}') or ('{Resource:label}' has ',' and Resource in~ (split('{Resource:label}', ', '))) | extend Protocol = extract(@'^([\\S]+)', 1, msg_s), Source = extract(@'request from ([^ :]+)', 1, msg_s), SourcePort = extract(@'request from ([^ :]+):([0-9]+)', 2, msg_s), Destination = extract(@'request from ([^ :]+):([0-9]+) to ([^ :]+)', 3, msg_s), DestinationPort = extract(@'request from ([^ :]+):([0-9]+) to ([^ :]+):([0-9]+)', 4, msg_s), Url = trim_end(@'\\.', extract(@'Url: ([\\S]+)', 1, msg_s)), Action = extract(@'Action: ([\\w]+)', 1, msg_s), Policy = trim_end(@'\\.', extract(@'Policy: ([\\S]+)', 1, msg_s)), RuleCollectionGroup = trim_end(@'\\.', extract(@'Rule Collection Group: ([\\S]+)', 1, msg_s)), RuleCollection = trim_end(@'\\.', extract(@'Rule Collection: ([\\S]+)', 1, msg_s)), Rule = trim_end(@'\\.', extract(@'Rule: ([\\S]+)', 1, msg_s)), WebCategory = trim_end(@'\\.', extract(@'Web Category: ([\\S]+)', 1, msg_s)), Reason = extract(@'Reason: ([^\\.]+)(\\.)', 1, msg_s), Firewall = Resource | where isempty('{SelectedSource}') or ('{SelectedSource}' !has ',' and Source =~ '{SelectedSource}') or ('{SelectedSource}' has ',' and Source in~ (split('{SelectedSource}', ','))) | where isempty('{SelectedDestination}') or ('{SelectedDestination}' !has ',' and Destination =~ '{SelectedDestination}') or ('{SelectedDestination}' has ',' and Destination in~ (split('{SelectedDestination}', ','))) | extend Rule = iif(isempty(Rule), 'No rule matched', Rule) | where isempty('{SelectedRule}') or ('{SelectedRule}' !has ',' and Rule =~ '{SelectedRule}') or ('{SelectedRule}' has ',' and Rule in~ (split('{SelectedRule}', ','))) | summarize Hits = count() by Protocol | project Hits, Protocol | sort by Hits desc",
                "size": 0,
                "showAnalytics": true,
                "title": "Hits by protocol ({$rowCount} in {$queryTime})",
                "noDataMessage": "Found no matching events.",
                "noDataMessageStyle": 2,
                "timeContext": {
                  "durationMs": 0
                },
                "timeContextFromParameter": "TimeRange",
                "queryType": 0,
                "resourceType": "microsoft.operationalinsights/workspaces",
                "crossComponentResources": [
                  "{Workspaces}"
                ],
                "visualization": "piechart"
              },
              "conditionalVisibility": {
                "parameterName": "selectedAppRuleTab",
                "comparison": "isEqualTo",
                "value": "Statistics"
              }
            },
            {
              "type": 3,
              "name": "AFAppDestPortPieQuery",
              "customWidth": "25",
              "content": {
                "version": "KqlItem/1.0",
                "query": "AzureDiagnostics | where ResourceType == 'AZUREFIREWALLS' and Category == 'AzureFirewallApplicationRule' and OperationName == 'AzureFirewallApplicationRuleLog' | where ('{Resource:label}' !has ',' and Resource =~ '{Resource:label}') or ('{Resource:label}' has ',' and Resource in~ (split('{Resource:label}', ', '))) | extend Protocol = extract(@'^([\\S]+)', 1, msg_s), Source = extract(@'request from ([^ :]+)', 1, msg_s), SourcePort = extract(@'request from ([^ :]+):([0-9]+)', 2, msg_s), Destination = extract(@'request from ([^ :]+):([0-9]+) to ([^ :]+)', 3, msg_s), DestinationPort = extract(@'request from ([^ :]+):([0-9]+) to ([^ :]+):([0-9]+)', 4, msg_s), Url = trim_end(@'\\.', extract(@'Url: ([\\S]+)', 1, msg_s)), Action = extract(@'Action: ([\\w]+)', 1, msg_s), Policy = trim_end(@'\\.', extract(@'Policy: ([\\S]+)', 1, msg_s)), RuleCollectionGroup = trim_end(@'\\.', extract(@'Rule Collection Group: ([\\S]+)', 1, msg_s)), RuleCollection = trim_end(@'\\.', extract(@'Rule Collection: ([\\S]+)', 1, msg_s)), Rule = trim_end(@'\\.', extract(@'Rule: ([\\S]+)', 1, msg_s)), WebCategory = trim_end(@'\\.', extract(@'Web Category: ([\\S]+)', 1, msg_s)), Reason = extract(@'Reason: ([^\\.]+)(\\.)', 1, msg_s), Firewall = Resource | where isempty('{SelectedSource}') or ('{SelectedSource}' !has ',' and Source =~ '{SelectedSource}') or ('{SelectedSource}' has ',' and Source in~ (split('{SelectedSource}', ','))) | where isempty('{SelectedDestination}') or ('{SelectedDestination}' !has ',' and Destination =~ '{SelectedDestination}') or ('{SelectedDestination}' has ',' and Destination in~ (split('{SelectedDestination}', ','))) | extend Rule = iif(isempty(Rule), 'No rule matched', Rule) | where isempty('{SelectedRule}') or ('{SelectedRule}' !has ',' and Rule =~ '{SelectedRule}') or ('{SelectedRule}' has ',' and Rule in~ (split('{SelectedRule}', ','))) | summarize Hits = count() by DestinationPort | project Hits, Port = DestinationPort | sort by Hits desc",
                "size": 0,
                "showAnalytics": true,
                "title": "Hits by destination port ({$rowCount} in {$queryTime})",
                "noDataMessage": "Found no matching events.",
                "noDataMessageStyle": 2,
                "timeContext": {
                  "durationMs": 0
                },
                "timeContextFromParameter": "TimeRange",
                "queryType": 0,
                "resourceType": "microsoft.operationalinsights/workspaces",
                "crossComponentResources": [
                  "{Workspaces}"
                ],
                "visualization": "piechart"
              },
              "conditionalVisibility": {
                "parameterName": "selectedAppRuleTab",
                "comparison": "isEqualTo",
                "value": "Statistics"
              }
            },
            {
              "type": 3,
              "name": "AFAppRulePieQuery",
              "customWidth": "25",
              "content": {
                "version": "KqlItem/1.0",
                "query": "AzureDiagnostics | where ResourceType == 'AZUREFIREWALLS' and Category == 'AzureFirewallApplicationRule' and OperationName == 'AzureFirewallApplicationRuleLog' | where ('{Resource:label}' !has ',' and Resource =~ '{Resource:label}') or ('{Resource:label}' has ',' and Resource in~ (split('{Resource:label}', ', '))) | extend Protocol = extract(@'^([\\S]+)', 1, msg_s), Source = extract(@'request from ([^ :]+)', 1, msg_s), SourcePort = extract(@'request from ([^ :]+):([0-9]+)', 2, msg_s), Destination = extract(@'request from ([^ :]+):([0-9]+) to ([^ :]+)', 3, msg_s), DestinationPort = extract(@'request from ([^ :]+):([0-9]+) to ([^ :]+):([0-9]+)', 4, msg_s), Url = trim_end(@'\\.', extract(@'Url: ([\\S]+)', 1, msg_s)), Action = extract(@'Action: ([\\w]+)', 1, msg_s), Policy = trim_end(@'\\.', extract(@'Policy: ([\\S]+)', 1, msg_s)), RuleCollectionGroup = trim_end(@'\\.', extract(@'Rule Collection Group: ([\\S]+)', 1, msg_s)), RuleCollection = trim_end(@'\\.', extract(@'Rule Collection: ([\\S]+)', 1, msg_s)), Rule = trim_end(@'\\.', extract(@'Rule: ([\\S]+)', 1, msg_s)), WebCategory = trim_end(@'\\.', extract(@'Web Category: ([\\S]+)', 1, msg_s)), Reason = extract(@'Reason: ([^\\.]+)(\\.)', 1, msg_s), Firewall = Resource | where isempty('{SelectedSource}') or ('{SelectedSource}' !has ',' and Source =~ '{SelectedSource}') or ('{SelectedSource}' has ',' and Source in~ (split('{SelectedSource}', ','))) | where isempty('{SelectedDestination}') or ('{SelectedDestination}' !has ',' and Destination =~ '{SelectedDestination}') or ('{SelectedDestination}' has ',' and Destination in~ (split('{SelectedDestination}', ','))) | extend Rule = iif(isempty(Rule), 'No rule matched', Rule) | where isempty('{SelectedRule}') or ('{SelectedRule}' !has ',' and Rule =~ '{SelectedRule}') or ('{SelectedRule}' has ',' and Rule in~ (split('{SelectedRule}', ','))) | summarize Hits = count() by Rule | project Hits, Rule | sort by Hits desc",
                "size": 0,
                "showAnalytics": true,
                "title": "Hits by rule ({$rowCount} in {$queryTime})",
                "noDataMessage": "Found no matching events.",
                "noDataMessageStyle": 2,
                "timeContext": {
                  "durationMs": 0
                },
                "timeContextFromParameter": "TimeRange",
                "queryType": 0,
                "resourceType": "microsoft.operationalinsights/workspaces",
                "crossComponentResources": [
                  "{Workspaces}"
                ],
                "visualization": "piechart"
              },
              "conditionalVisibility": {
                "parameterName": "selectedAppRuleTab",
                "comparison": "isEqualTo",
                "value": "Statistics"
              }
            },
            {
              "type": 3,
              "name": "AFAppDeniedDestPortQuery",
              "customWidth": "50",
              "content": {
                "version": "KqlItem/1.0",
                "query": "AzureDiagnostics | where ResourceType == 'AZUREFIREWALLS' and Category == 'AzureFirewallApplicationRule' and OperationName == 'AzureFirewallApplicationRuleLog' | where ('{Resource:label}' !has ',' and Resource =~ '{Resource:label}') or ('{Resource:label}' has ',' and Resource in~ (split('{Resource:label}', ', '))) | extend Protocol = extract(@'^([\\S]+)', 1, msg_s), Source = extract(@'request from ([^ :]+)', 1, msg_s), SourcePort = extract(@'request from ([^ :]+):([0-9]+)', 2, msg_s), Destination = extract(@'request from ([^ :]+):([0-9]+) to ([^ :]+)', 3, msg_s), DestinationPort = extract(@'request from ([^ :]+):([0-9]+) to ([^ :]+):([0-9]+)', 4, msg_s), Url = trim_end(@'\\.', extract(@'Url: ([\\S]+)', 1, msg_s)), Action = extract(@'Action: ([\\w]+)', 1, msg_s), Policy = trim_end(@'\\.', extract(@'Policy: ([\\S]+)', 1, msg_s)), RuleCollectionGroup = trim_end(@'\\.', extract(@'Rule Collection Group: ([\\S]+)', 1, msg_s)), RuleCollection = trim_end(@'\\.', extract(@'Rule Collection: ([\\S]+)', 1, msg_s)), Rule = trim_end(@'\\.', extract(@'Rule: ([\\S]+)', 1, msg_s)), WebCategory = trim_end(@'\\.', extract(@'Web Category: ([\\S]+)', 1, msg_s)), Reason = extract(@'Reason: ([^\\.]+)(\\.)', 1, msg_s), Firewall = Resource | where Action == 'Deny' | where isempty('{SelectedSource}') or ('{SelectedSource}' !has ',' and Source =~ '{SelectedSource}') or ('{SelectedSource}' has ',' and Source in~ (split('{SelectedSource}', ','))) | where isempty('{SelectedDestination}') or ('{SelectedDestination}' !has ',' and Destination =~ '{SelectedDestination}') or ('{SelectedDestination}' has ',' and Destination in~ (split('{SelectedDestination}', ','))) | extend Rule = iif(isempty(Rule), 'No rule matched', Rule) | where isempty('{SelectedRule}') or ('{SelectedRule}' !has ',' and Rule =~ '{SelectedRule}') or ('{SelectedRule}' has ',' and Rule in~ (split('{SelectedRule}', ','))) | extend Destination = iif(isempty(Destination), Reason, Destination) | summarize Hits = count() by Firewall, Rule, Destination, DestinationPort | project Hits, Destination, Port = DestinationPort, Rule, Firewall | sort by Hits desc",
                "size": 1,
                "showAnalytics": true,
                "title": "Denied hits by firewall, rule, destination and port ({$rowCount} in {$queryTime})",
                "noDataMessage": "Found no matching events.",
                "noDataMessageStyle": 2,
                "timeContext": {
                  "durationMs": 14400000
                },
                "timeContextFromParameter": "TimeRange",
                "showExportToExcel": true,
                "queryType": 0,
                "resourceType": "microsoft.operationalinsights/workspaces",
                "crossComponentResources": [
                  "{Workspaces}"
                ],
                "visualization": "table",
                "gridSettings": {
                  "formatters": [
                    {
                      "columnMatch": "Hits",
                      "formatter": 8,
                      "formatOptions": {
                        "palette": "whiteBlack"
                      },
                      "numberFormat": {
                        "unit": 17,
                        "options": {
                          "style": "decimal",
                          "useGrouping": false,
                          "maximumSignificantDigits": 4
                        }
                      }
                    }
                  ]
                },
                "sortBy": []
              },
              "conditionalVisibility": {
                "parameterName": "selectedAppRuleTab",
                "comparison": "isEqualTo",
                "value": "Statistics"
              }
            },
            {
              "type": 3,
              "name": "AFAppAllowedDestPortQuery",
              "customWidth": "50",
              "content": {
                "version": "KqlItem/1.0",
                "query": "AzureDiagnostics | where ResourceType == 'AZUREFIREWALLS' and Category == 'AzureFirewallApplicationRule' and OperationName == 'AzureFirewallApplicationRuleLog' | where ('{Resource:label}' !has ',' and Resource =~ '{Resource:label}') or ('{Resource:label}' has ',' and Resource in~ (split('{Resource:label}', ', '))) | extend Protocol = extract(@'^([\\S]+)', 1, msg_s), Source = extract(@'request from ([^ :]+)', 1, msg_s), SourcePort = extract(@'request from ([^ :]+):([0-9]+)', 2, msg_s), Destination = extract(@'request from ([^ :]+):([0-9]+) to ([^ :]+)', 3, msg_s), DestinationPort = extract(@'request from ([^ :]+):([0-9]+) to ([^ :]+):([0-9]+)', 4, msg_s), Url = trim_end(@'\\.', extract(@'Url: ([\\S]+)', 1, msg_s)), Action = extract(@'Action: ([\\w]+)', 1, msg_s), Policy = trim_end(@'\\.', extract(@'Policy: ([\\S]+)', 1, msg_s)), RuleCollectionGroup = trim_end(@'\\.', extract(@'Rule Collection Group: ([\\S]+)', 1, msg_s)), RuleCollection = trim_end(@'\\.', extract(@'Rule Collection: ([\\S]+)', 1, msg_s)), Rule = trim_end(@'\\.', extract(@'Rule: ([\\S]+)', 1, msg_s)), WebCategory = trim_end(@'\\.', extract(@'Web Category: ([\\S]+)', 1, msg_s)), Reason = extract(@'Reason: ([^\\.]+)(\\.)', 1, msg_s), Firewall = Resource | where Action == 'Allow' | where isempty('{SelectedSource}') or ('{SelectedSource}' !has ',' and Source =~ '{SelectedSource}') or ('{SelectedSource}' has ',' and Source in~ (split('{SelectedSource}', ','))) | where isempty('{SelectedDestination}') or ('{SelectedDestination}' !has ',' and Destination =~ '{SelectedDestination}') or ('{SelectedDestination}' has ',' and Destination in~ (split('{SelectedDestination}', ','))) | extend Rule = iif(isempty(Rule), 'No rule matched', Rule) | where isempty('{SelectedRule}') or ('{SelectedRule}' !has ',' and Rule =~ '{SelectedRule}') or ('{SelectedRule}' has ',' and Rule in~ (split('{SelectedRule}', ','))) | extend Destination = iif(isempty(Destination), Reason, Destination) | summarize Hits = count() by Firewall, Rule, Destination, DestinationPort | project Hits, Destination, Port = DestinationPort, Rule, Firewall | sort by Hits desc",
                "size": 1,
                "showAnalytics": true,
                "title": "Allowed hits by firewall, rule, destination and port ({$rowCount} in {$queryTime})",
                "noDataMessage": "Found no matching events.",
                "noDataMessageStyle": 2,
                "timeContext": {
                  "durationMs": 14400000
                },
                "timeContextFromParameter": "TimeRange",
                "showExportToExcel": true,
                "queryType": 0,
                "resourceType": "microsoft.operationalinsights/workspaces",
                "crossComponentResources": [
                  "{Workspaces}"
                ],
                "visualization": "table",
                "gridSettings": {
                  "formatters": [
                    {
                      "columnMatch": "Hits",
                      "formatter": 8,
                      "formatOptions": {
                        "palette": "whiteBlack"
                      },
                      "numberFormat": {
                        "unit": 17,
                        "options": {
                          "style": "decimal",
                          "useGrouping": false,
                          "maximumSignificantDigits": 4
                        }
                      }
                    }
                  ]
                },
                "sortBy": []
              },
              "conditionalVisibility": {
                "parameterName": "selectedAppRuleTab",
                "comparison": "isEqualTo",
                "value": "Statistics"
              }
            },
            {
              "type": 3,
              "name": "AFAppDeniedDestChartQuery",
              "customWidth": "50",
              "content": {
                "version": "KqlItem/1.0",
                "query": "AzureDiagnostics | where ResourceType == 'AZUREFIREWALLS' and Category == 'AzureFirewallApplicationRule' and OperationName == 'AzureFirewallApplicationRuleLog' | where ('{Resource:label}' !has ',' and Resource =~ '{Resource:label}') or ('{Resource:label}' has ',' and Resource in~ (split('{Resource:label}', ', '))) | extend Protocol = extract(@'^([\\S]+)', 1, msg_s), Source = extract(@'request from ([^ :]+)', 1, msg_s), SourcePort = extract(@'request from ([^ :]+):([0-9]+)', 2, msg_s), Destination = extract(@'request from ([^ :]+):([0-9]+) to ([^ :]+)', 3, msg_s), DestinationPort = extract(@'request from ([^ :]+):([0-9]+) to ([^ :]+):([0-9]+)', 4, msg_s), Url = trim_end(@'\\.', extract(@'Url: ([\\S]+)', 1, msg_s)), Action = extract(@'Action: ([\\w]+)', 1, msg_s), Policy = trim_end(@'\\.', extract(@'Policy: ([\\S]+)', 1, msg_s)), RuleCollectionGroup = trim_end(@'\\.', extract(@'Rule Collection Group: ([\\S]+)', 1, msg_s)), RuleCollection = trim_end(@'\\.', extract(@'Rule Collection: ([\\S]+)', 1, msg_s)), Rule = trim_end(@'\\.', extract(@'Rule: ([\\S]+)', 1, msg_s)), WebCategory = trim_end(@'\\.', extract(@'Web Category: ([\\S]+)', 1, msg_s)), Reason = extract(@'Reason: ([^\\.]+)(\\.)', 1, msg_s), Firewall = Resource | where Action == 'Deny' | where isempty('{SelectedSource}') or ('{SelectedSource}' !has ',' and Source =~ '{SelectedSource}') or ('{SelectedSource}' has ',' and Source in~ (split('{SelectedSource}', ','))) | where isempty('{SelectedDestination}') or ('{SelectedDestination}' !has ',' and Destination =~ '{SelectedDestination}') or ('{SelectedDestination}' has ',' and Destination in~ (split('{SelectedDestination}', ','))) | extend Rule = iif(isempty(Rule), 'No rule matched', Rule) | where isempty('{SelectedRule}') or ('{SelectedRule}' !has ',' and Rule =~ '{SelectedRule}') or ('{SelectedRule}' has ',' and Rule in~ (split('{SelectedRule}', ','))) | extend Destination = iif(isempty(Destination), Reason, iif(isempty(DestinationPort), Destination, strcat(Destination, ':', DestinationPort))) | summarize Hits = count() by Destination, bin(TimeGenerated, {TimeRange:grain})",
                "size": 1,
                "showAnalytics": true,
                "title": "Denied hits by destination and port ({$rowCount} in {$queryTime})",
                "noDataMessage": "Found no matching events.",
                "noDataMessageStyle": 2,
                "timeContext": {
                  "durationMs": 14400000
                },
                "timeContextFromParameter": "TimeRange",
                "queryType": 0,
                "resourceType": "microsoft.operationalinsights/workspaces",
                "crossComponentResources": [
                  "{Workspaces}"
                ],
                "visualization": "timechart",
                "tileSettings": {
                  "showBorder": false
                },
                "chartSettings": {
                  "showLegend": true
                }
              },
              "conditionalVisibility": {
                "parameterName": "selectedAppRuleTab",
                "comparison": "isEqualTo",
                "value": "Statistics"
              }
            },
            {
              "type": 3,
              "name": "AFAppAllowedDestChartQuery",
              "customWidth": "50",
              "content": {
                "version": "KqlItem/1.0",
                "query": "AzureDiagnostics | where ResourceType == 'AZUREFIREWALLS' and Category == 'AzureFirewallApplicationRule' and OperationName == 'AzureFirewallApplicationRuleLog' | where ('{Resource:label}' !has ',' and Resource =~ '{Resource:label}') or ('{Resource:label}' has ',' and Resource in~ (split('{Resource:label}', ', '))) | extend Protocol = extract(@'^([\\S]+)', 1, msg_s), Source = extract(@'request from ([^ :]+)', 1, msg_s), SourcePort = extract(@'request from ([^ :]+):([0-9]+)', 2, msg_s), Destination = extract(@'request from ([^ :]+):([0-9]+) to ([^ :]+)', 3, msg_s), DestinationPort = extract(@'request from ([^ :]+):([0-9]+) to ([^ :]+):([0-9]+)', 4, msg_s), Url = trim_end(@'\\.', extract(@'Url: ([\\S]+)', 1, msg_s)), Action = extract(@'Action: ([\\w]+)', 1, msg_s), Policy = trim_end(@'\\.', extract(@'Policy: ([\\S]+)', 1, msg_s)), RuleCollectionGroup = trim_end(@'\\.', extract(@'Rule Collection Group: ([\\S]+)', 1, msg_s)), RuleCollection = trim_end(@'\\.', extract(@'Rule Collection: ([\\S]+)', 1, msg_s)), Rule = trim_end(@'\\.', extract(@'Rule: ([\\S]+)', 1, msg_s)), WebCategory = trim_end(@'\\.', extract(@'Web Category: ([\\S]+)', 1, msg_s)), Reason = extract(@'Reason: ([^\\.]+)(\\.)', 1, msg_s), Firewall = Resource | where Action == 'Allow' | where isempty('{SelectedSource}') or ('{SelectedSource}' !has ',' and Source =~ '{SelectedSource}') or ('{SelectedSource}' has ',' and Source in~ (split('{SelectedSource}', ','))) | where isempty('{SelectedDestination}') or ('{SelectedDestination}' !has ',' and Destination =~ '{SelectedDestination}') or ('{SelectedDestination}' has ',' and Destination in~ (split('{SelectedDestination}', ','))) | extend Rule = iif(isempty(Rule), 'No rule matched', Rule) | where isempty('{SelectedRule}') or ('{SelectedRule}' !has ',' and Rule =~ '{SelectedRule}') or ('{SelectedRule}' has ',' and Rule in~ (split('{SelectedRule}', ','))) | extend Destination = iif(isempty(Destination), Reason, iif(isempty(DestinationPort), Destination, strcat(Destination, ':', DestinationPort))) | summarize Hits = count() by Destination, bin(TimeGenerated, {TimeRange:grain})",
                "size": 1,
                "showAnalytics": true,
                "title": "Allowed hits by destination and port ({$rowCount} in {$queryTime})",
                "noDataMessage": "Found no matching events.",
                "noDataMessageStyle": 2,
                "timeContext": {
                  "durationMs": 14400000
                },
                "timeContextFromParameter": "TimeRange",
                "queryType": 0,
                "resourceType": "microsoft.operationalinsights/workspaces",
                "crossComponentResources": [
                  "{Workspaces}"
                ],
                "visualization": "timechart",
                "tileSettings": {
                  "showBorder": false
                },
                "chartSettings": {
                  "showLegend": true
                }
              },
              "conditionalVisibility": {
                "parameterName": "selectedAppRuleTab",
                "comparison": "isEqualTo",
                "value": "Statistics"
              }
            },
            {
              "type": 3,
              "name": "AFAppDeniedWebCatRuleQuery",
              "customWidth": "50",
              "content": {
                "version": "KqlItem/1.0",
                "query": "AzureDiagnostics | where ResourceType == 'AZUREFIREWALLS' and Category == 'AzureFirewallApplicationRule' and OperationName == 'AzureFirewallApplicationRuleLog' | where ('{Resource:label}' !has ',' and Resource =~ '{Resource:label}') or ('{Resource:label}' has ',' and Resource in~ (split('{Resource:label}', ', '))) | extend Protocol = extract(@'^([\\S]+)', 1, msg_s), Source = extract(@'request from ([^ :]+)', 1, msg_s), SourcePort = extract(@'request from ([^ :]+):([0-9]+)', 2, msg_s), Destination = extract(@'request from ([^ :]+):([0-9]+) to ([^ :]+)', 3, msg_s), DestinationPort = extract(@'request from ([^ :]+):([0-9]+) to ([^ :]+):([0-9]+)', 4, msg_s), Url = trim_end(@'\\.', extract(@'Url: ([\\S]+)', 1, msg_s)), Action = extract(@'Action: ([\\w]+)', 1, msg_s), Policy = trim_end(@'\\.', extract(@'Policy: ([\\S]+)', 1, msg_s)), RuleCollectionGroup = trim_end(@'\\.', extract(@'Rule Collection Group: ([\\S]+)', 1, msg_s)), RuleCollection = trim_end(@'\\.', extract(@'Rule Collection: ([\\S]+)', 1, msg_s)), Rule = trim_end(@'\\.', extract(@'Rule: ([\\S]+)', 1, msg_s)), WebCategory = trim_end(@'\\.', extract(@'Web Category: ([\\S]+)', 1, msg_s)), Reason = extract(@'Reason: ([^\\.]+)(\\.)', 1, msg_s), Firewall = Resource | where isnotempty(WebCategory) | where Action == 'Deny' | where isempty('{SelectedSource}') or ('{SelectedSource}' !has ',' and Source =~ '{SelectedSource}') or ('{SelectedSource}' has ',' and Source in~ (split('{SelectedSource}', ','))) | where isempty('{SelectedDestination}') or ('{SelectedDestination}' !has ',' and Destination =~ '{SelectedDestination}') or ('{SelectedDestination}' has ',' and Destination in~ (split('{SelectedDestination}', ','))) | extend Rule = iif(isempty(Rule), 'No rule matched', Rule) | where isempty('{SelectedRule}') or ('{SelectedRule}' !has ',' and Rule =~ '{SelectedRule}') or ('{SelectedRule}' has ',' and Rule in~ (split('{SelectedRule}', ','))) | summarize Hits = count() by Firewall, Rule, WebCategory | project Hits, WebCategory, Rule, Firewall | sort by Hits desc",
                "size": 0,
                "showAnalytics": true,
                "showExportToExcel": true,
                "title": "Denied hits by firewall, rule and web category ({$rowCount} in {$queryTime})",
                "noDataMessage": "Found no matching events.",
                "noDataMessageStyle": 2,
                "timeContext": {
                  "durationMs": 14400000
                },
                "timeContextFromParameter": "TimeRange",
                "queryType": 0,
                "resourceType": "microsoft.operationalinsights/workspaces",
                "crossComponentResources": [
                  "{Workspaces}"
                ],
                "visualization": "table",
                "gridSettings": {
                  "formatters": [
                    {
                      "columnMatch": "Hits",
                      "formatter": 8,
                      "formatOptions": {
                        "palette": "whiteBlack"
                      },
                      "numberFormat": {
                        "unit": 17,
                        "options": {
                          "style": "decimal",
                          "useGrouping": false,
                          "maximumSignificantDigits": 4
                        }
                      }
                    }
                  ]
                },
                "sortBy": []
              },
              "conditionalVisibility": {
                "parameterName": "selectedAppRuleTab",
                "comparison": "isEqualTo",
                "value": "WebCategories"
              }
            },
            {
              "type": 3,
              "name": "AFAppAllowedWebCatRuleQuery",
              "customWidth": "50",
              "content": {
                "version": "KqlItem/1.0",
                "query": "AzureDiagnostics | where ResourceType == 'AZUREFIREWALLS' and Category == 'AzureFirewallApplicationRule' and OperationName == 'AzureFirewallApplicationRuleLog' | where ('{Resource:label}' !has ',' and Resource =~ '{Resource:label}') or ('{Resource:label}' has ',' and Resource in~ (split('{Resource:label}', ', '))) | extend Protocol = extract(@'^([\\S]+)', 1, msg_s), Source = extract(@'request from ([^ :]+)', 1, msg_s), SourcePort = extract(@'request from ([^ :]+):([0-9]+)', 2, msg_s), Destination = extract(@'request from ([^ :]+):([0-9]+) to ([^ :]+)', 3, msg_s), DestinationPort = extract(@'request from ([^ :]+):([0-9]+) to ([^ :]+):([0-9]+)', 4, msg_s), Url = trim_end(@'\\.', extract(@'Url: ([\\S]+)', 1, msg_s)), Action = extract(@'Action: ([\\w]+)', 1, msg_s), Policy = trim_end(@'\\.', extract(@'Policy: ([\\S]+)', 1, msg_s)), RuleCollectionGroup = trim_end(@'\\.', extract(@'Rule Collection Group: ([\\S]+)', 1, msg_s)), RuleCollection = trim_end(@'\\.', extract(@'Rule Collection: ([\\S]+)', 1, msg_s)), Rule = trim_end(@'\\.', extract(@'Rule: ([\\S]+)', 1, msg_s)), WebCategory = trim_end(@'\\.', extract(@'Web Category: ([\\S]+)', 1, msg_s)), Reason = extract(@'Reason: ([^\\.]+)(\\.)', 1, msg_s), Firewall = Resource | where isnotempty(WebCategory) | where Action == 'Allow' | where isempty('{SelectedSource}') or ('{SelectedSource}' !has ',' and Source =~ '{SelectedSource}') or ('{SelectedSource}' has ',' and Source in~ (split('{SelectedSource}', ','))) | where isempty('{SelectedDestination}') or ('{SelectedDestination}' !has ',' and Destination =~ '{SelectedDestination}') or ('{SelectedDestination}' has ',' and Destination in~ (split('{SelectedDestination}', ','))) | extend Rule = iif(isempty(Rule), 'No rule matched', Rule) | where isempty('{SelectedRule}') or ('{SelectedRule}' !has ',' and Rule =~ '{SelectedRule}') or ('{SelectedRule}' has ',' and Rule in~ (split('{SelectedRule}', ','))) | summarize Hits = count() by Firewall, Rule, WebCategory | project Hits, WebCategory, Rule, Firewall | sort by Hits desc",
                "size": 0,
                "showAnalytics": true,
                "showExportToExcel": true,
                "title": "Allowed hits by firewall, rule and web category ({$rowCount} in {$queryTime})",
                "noDataMessage": "Found no matching events.",
                "noDataMessageStyle": 2,
                "timeContext": {
                  "durationMs": 14400000
                },
                "timeContextFromParameter": "TimeRange",
                "queryType": 0,
                "resourceType": "microsoft.operationalinsights/workspaces",
                "crossComponentResources": [
                  "{Workspaces}"
                ],
                "gridSettings": {
                  "formatters": [
                    {
                      "columnMatch": "Hits",
                      "formatter": 8,
                      "formatOptions": {
                        "palette": "whiteBlack"
                      },
                      "numberFormat": {
                        "unit": 17,
                        "options": {
                          "style": "decimal",
                          "useGrouping": false,
                          "maximumSignificantDigits": 4
                        }
                      }
                    }
                  ]
                },
                "sortBy": []
              },
              "conditionalVisibility": {
                "parameterName": "selectedAppRuleTab",
                "comparison": "isEqualTo",
                "value": "WebCategories"
              }
            },
            {
              "type": 3,
              "name": "AFAppDeniedWebCatChartQuery",
              "customWidth": "50",
              "content": {
                "version": "KqlItem/1.0",
                "query": "AzureDiagnostics | where ResourceType == 'AZUREFIREWALLS' and Category == 'AzureFirewallApplicationRule' and OperationName == 'AzureFirewallApplicationRuleLog' | where ('{Resource:label}' !has ',' and Resource =~ '{Resource:label}') or ('{Resource:label}' has ',' and Resource in~ (split('{Resource:label}', ', '))) | extend Protocol = extract(@'^([\\S]+)', 1, msg_s), Source = extract(@'request from ([^ :]+)', 1, msg_s), SourcePort = extract(@'request from ([^ :]+):([0-9]+)', 2, msg_s), Destination = extract(@'request from ([^ :]+):([0-9]+) to ([^ :]+)', 3, msg_s), DestinationPort = extract(@'request from ([^ :]+):([0-9]+) to ([^ :]+):([0-9]+)', 4, msg_s), Url = trim_end(@'\\.', extract(@'Url: ([\\S]+)', 1, msg_s)), Action = extract(@'Action: ([\\w]+)', 1, msg_s), Policy = trim_end(@'\\.', extract(@'Policy: ([\\S]+)', 1, msg_s)), RuleCollectionGroup = trim_end(@'\\.', extract(@'Rule Collection Group: ([\\S]+)', 1, msg_s)), RuleCollection = trim_end(@'\\.', extract(@'Rule Collection: ([\\S]+)', 1, msg_s)), Rule = trim_end(@'\\.', extract(@'Rule: ([\\S]+)', 1, msg_s)), WebCategory = trim_end(@'\\.', extract(@'Web Category: ([\\S]+)', 1, msg_s)), Reason = extract(@'Reason: ([^\\.]+)(\\.)', 1, msg_s), Firewall = Resource | where isnotempty(WebCategory) | where Action == 'Deny' | where isempty('{SelectedSource}') or ('{SelectedSource}' !has ',' and Source =~ '{SelectedSource}') or ('{SelectedSource}' has ',' and Source in~ (split('{SelectedSource}', ','))) | where isempty('{SelectedDestination}') or ('{SelectedDestination}' !has ',' and Destination =~ '{SelectedDestination}') or ('{SelectedDestination}' has ',' and Destination in~ (split('{SelectedDestination}', ','))) | extend Rule = iif(isempty(Rule), 'No rule matched', Rule) | where isempty('{SelectedRule}') or ('{SelectedRule}' !has ',' and Rule =~ '{SelectedRule}') or ('{SelectedRule}' has ',' and Rule in~ (split('{SelectedRule}', ','))) | summarize count() by WebCategory, bin(TimeGenerated, {TimeRange:grain})",
                "size": 0,
                "showAnalytics": true,
                "title": "Denied hits by web category ({$rowCount} in {$queryTime})",
                "noDataMessage": "Found no matching events.",
                "noDataMessageStyle": 2,
                "timeContext": {
                  "durationMs": 14400000
                },
                "timeContextFromParameter": "TimeRange",
                "queryType": 0,
                "resourceType": "microsoft.operationalinsights/workspaces",
                "crossComponentResources": [
                  "{Workspaces}"
                ],
                "visualization": "timechart",
                "tileSettings": {
                  "showBorder": false
                },
                "chartSettings": {
                  "showLegend": true
                }
              },
              "conditionalVisibility": {
                "parameterName": "selectedAppRuleTab",
                "comparison": "isEqualTo",
                "value": "WebCategories"
              }
            },
            {
              "type": 3,
              "name": "AFAppAllowedWebCatChartQuery",
              "customWidth": "50",
              "content": {
                "version": "KqlItem/1.0",
                "query": "AzureDiagnostics | where ResourceType == 'AZUREFIREWALLS' and Category == 'AzureFirewallApplicationRule' and OperationName == 'AzureFirewallApplicationRuleLog' | where ('{Resource:label}' !has ',' and Resource =~ '{Resource:label}') or ('{Resource:label}' has ',' and Resource in~ (split('{Resource:label}', ', '))) | extend Protocol = extract(@'^([\\S]+)', 1, msg_s), Source = extract(@'request from ([^ :]+)', 1, msg_s), SourcePort = extract(@'request from ([^ :]+):([0-9]+)', 2, msg_s), Destination = extract(@'request from ([^ :]+):([0-9]+) to ([^ :]+)', 3, msg_s), DestinationPort = extract(@'request from ([^ :]+):([0-9]+) to ([^ :]+):([0-9]+)', 4, msg_s), Url = trim_end(@'\\.', extract(@'Url: ([\\S]+)', 1, msg_s)), Action = extract(@'Action: ([\\w]+)', 1, msg_s), Policy = trim_end(@'\\.', extract(@'Policy: ([\\S]+)', 1, msg_s)), RuleCollectionGroup = trim_end(@'\\.', extract(@'Rule Collection Group: ([\\S]+)', 1, msg_s)), RuleCollection = trim_end(@'\\.', extract(@'Rule Collection: ([\\S]+)', 1, msg_s)), Rule = trim_end(@'\\.', extract(@'Rule: ([\\S]+)', 1, msg_s)), WebCategory = trim_end(@'\\.', extract(@'Web Category: ([\\S]+)', 1, msg_s)), Reason = extract(@'Reason: ([^\\.]+)(\\.)', 1, msg_s), Firewall = Resource | where isnotempty(WebCategory) | where Action == 'Allow' | where isempty('{SelectedSource}') or ('{SelectedSource}' !has ',' and Source =~ '{SelectedSource}') or ('{SelectedSource}' has ',' and Source in~ (split('{SelectedSource}', ','))) | where isempty('{SelectedDestination}') or ('{SelectedDestination}' !has ',' and Destination =~ '{SelectedDestination}') or ('{SelectedDestination}' has ',' and Destination in~ (split('{SelectedDestination}', ','))) | extend Rule = iif(isempty(Rule), 'No rule matched', Rule) | where isempty('{SelectedRule}') or ('{SelectedRule}' !has ',' and Rule =~ '{SelectedRule}') or ('{SelectedRule}' has ',' and Rule in~ (split('{SelectedRule}', ','))) | summarize count() by WebCategory, bin(TimeGenerated, {TimeRange:grain})",
                "size": 0,
                "showAnalytics": true,
                "title": "Allowed hits by web category ({$rowCount} in {$queryTime})",
                "noDataMessage": "Found no matching events.",
                "noDataMessageStyle": 2,
                "timeContext": {
                  "durationMs": 14400000
                },
                "timeContextFromParameter": "TimeRange",
                "queryType": 0,
                "resourceType": "microsoft.operationalinsights/workspaces",
                "crossComponentResources": [
                  "{Workspaces}"
                ],
                "visualization": "timechart",
                "tileSettings": {
                  "showBorder": false
                },
                "chartSettings": {
                  "showLegend": true
                }
              },
              "conditionalVisibility": {
                "parameterName": "selectedAppRuleTab",
                "comparison": "isEqualTo",
                "value": "WebCategories"
              }
            }
          ]
        },
        "conditionalVisibility": {
          "parameterName": "selectedTab",
          "comparison": "isEqualTo",
          "value": "AFAppRule"
        }
      },
      {
        "type": 12,
        "name": "AFNetRuleGroup",
        "content": {
          "version": "NotebookGroup/1.0",
          "groupType": "editable",
          "items": [
            {
              "type": 11,
              "name": "NetRuleLinks",
              "content": {
                "version": "LinkItem/1.0",
                "style": "tabs",
                "links": [
                  {
                    "id": "837e338f-3385-4128-825c-c0e6c79b7019",
                    "cellValue": "selectedNetRuleTab",
                    "linkTarget": "parameter",
                    "linkLabel": "Search",
                    "subTarget": "Search",
                    "style": "link"
                  },
                  {
                    "id": "554e6c51-3476-4770-b5bb-989f6aff0fd0",
                    "cellValue": "selectedNetRuleTab",
                    "linkTarget": "parameter",
                    "linkLabel": "Statistics",
                    "subTarget": "Statistics",
                    "style": "link"
                  },
                  {
                    "id": "b8ca5029-dbcc-467d-b650-cae865e09d0b",
                    "cellValue": "selectedNetRuleTab",
                    "linkTarget": "parameter",
                    "linkLabel": "Threat Intel",
                    "subTarget": "ThreatIntel",
                    "style": "link"
                  }
                ]
              }
            },
            {
              "type": 3,
              "name": "AFNetSelectedSourceQuery",
              "customWidth": "50",
              "content": {
                "version": "KqlItem/1.0",
                "query": "AzureDiagnostics | where ResourceType == 'AZUREFIREWALLS' and Category == 'AzureFirewallNetworkRule' and OperationName == 'AzureFirewallNetworkRuleLog'  | where ('{Resource:label}' !has ',' and Resource =~ '{Resource:label}') or ('{Resource:label}' has ',' and Resource in~ (split('{Resource:label}', ', '))) | extend Protocol = extract(@'^([\\S]+)', 1, msg_s), ICMPType = extract(@'^ICMP Type=([\\S]+)', 1, msg_s), Source = extract(@'request from ([^ :]+)', 1, msg_s), SourcePort = extract(@'request from ([^ :]+):([0-9]+)', 2, msg_s), FirstDestination = extract(@'request from ([^ :]+):([0-9]+) to ([^ :]+)', 3, msg_s), ICMPDestination = trim_end(@'\\.', extract(@'request from ([^ :]+) to ([^ :]+)', 2, msg_s)), DestinationPort = extract(@'request from ([^ :]+):([0-9]+) to ([^ :]+):([0-9]+)', 4, msg_s), NATAction = extract(@'request from ([^ :]+):([0-9]+) to ([^ :]+):([0-9]+) was ([\\S]+) to', 5, msg_s), NATDestination = extract(@'request from ([^ :]+):([0-9]+) to ([^ :]+):([0-9]+) was ([\\S]+) to ([^ :]+)', 6, msg_s), NATDestinationPort = extract(@'request from ([^ :]+):([0-9]+) to ([^ :]+):([0-9]+) was ([\\S]+) to ([^ :]+):([0-9]+)', 7, msg_s), Action = extract(@'Action: ([\\w]+)', 1, msg_s), Firewall = Resource | extend Destination = iif(isempty(FirstDestination), ICMPDestination, FirstDestination), Action = iif(isempty(Action), NATAction, Action), DestinationPort = iif(Protocol == 'ICMP', ICMPType, DestinationPort) | join kind=leftouter (AzureNetworkAnalytics_CL | where SubType_s == 'Topology' and ResourceType in ('NetworkInterface', 'ApplicationGateway', 'VirtualNetworkGateway', 'LoadBalancer') | extend RGandName = split(iif(ResourceType == 'NetworkInterface' and isnotnull(VirtualMachine_s), VirtualMachine_s, Name_s), '/') | extend IPResourceId = strcat('/subscriptions/', Subscription_g, '/resourceGroups/', RGandName[0], '/providers/', iif(ResourceType == 'NetworkInterface' and isnotnull(VirtualMachine_s), 'Microsoft.Compute/virtualMachines/', strcat('Microsoft.Network/', ResourceType, 's/')), RGandName[1]) | extend IP = pack_array(PrivateFrontendIPs_s, PublicFrontendIPs_s, VIPAddress_s, PrivateIPAddresses_s, PublicIPAddresses_s, PublicIPs_s) | mv-expand IP | where isnotempty(IP) | summarize by IPResourceId, tostring(IP)) on $left.Source == $right.IP | summarize Hits = count() by Source, IPResourceId | project Hits, Source, Resource = IPResourceId | sort by Hits desc",
                "size": 1,
                "showAnalytics": true,
                "showExportToExcel": true,
                "title": "Select source ({$rowCount} in {$queryTime})",
                "noDataMessage": "Found no matching events.",
                "noDataMessageStyle": 2,
                "timeContext": {
                  "durationMs": 14400000
                },
                "timeContextFromParameter": "TimeRange",
                "exportMultipleValues": true,
                "exportedParameters": [
                  {
                    "fieldName": "Source",
                    "parameterName": "SelectedSource",
                    "parameterType": 1,
                    "quote": "",
                    "delimiter": ","
                  }
                ],
                "queryType": 0,
                "resourceType": "microsoft.operationalinsights/workspaces",
                "crossComponentResources": [
                  "{Workspaces}"
                ],
                "gridSettings": {
                  "formatters": [
                    {
                      "columnMatch": "Hits",
                      "formatter": 8,
                      "formatOptions": {
                        "palette": "whiteBlack"
                      },
                      "numberFormat": {
                        "unit": 17,
                        "options": {
                          "style": "decimal",
                          "useGrouping": false,
                          "maximumSignificantDigits": 4
                        }
                      }
                    }
                  ],
                  "rowLimit": 10000,
                  "filter": true
                }
              }
            },
            {
              "type": 3,
              "name": "AFNetSelectedDestinationQuery",
              "customWidth": "50",
              "content": {
                "version": "KqlItem/1.0",
                "query": "AzureDiagnostics | where ResourceType == 'AZUREFIREWALLS' and Category == 'AzureFirewallNetworkRule' and OperationName == 'AzureFirewallNetworkRuleLog'  | where ('{Resource:label}' !has ',' and Resource =~ '{Resource:label}') or ('{Resource:label}' has ',' and Resource in~ (split('{Resource:label}', ', '))) | extend Protocol = extract(@'^([\\S]+)', 1, msg_s), ICMPType = extract(@'^ICMP Type=([\\S]+)', 1, msg_s), Source = extract(@'request from ([^ :]+)', 1, msg_s), SourcePort = extract(@'request from ([^ :]+):([0-9]+)', 2, msg_s), FirstDestination = extract(@'request from ([^ :]+):([0-9]+) to ([^ :]+)', 3, msg_s), ICMPDestination = trim_end(@'\\.', extract(@'request from ([^ :]+) to ([^ :]+)', 2, msg_s)), DestinationPort = extract(@'request from ([^ :]+):([0-9]+) to ([^ :]+):([0-9]+)', 4, msg_s), NATAction = extract(@'request from ([^ :]+):([0-9]+) to ([^ :]+):([0-9]+) was ([\\S]+) to', 5, msg_s), NATDestination = extract(@'request from ([^ :]+):([0-9]+) to ([^ :]+):([0-9]+) was ([\\S]+) to ([^ :]+)', 6, msg_s), NATDestinationPort = extract(@'request from ([^ :]+):([0-9]+) to ([^ :]+):([0-9]+) was ([\\S]+) to ([^ :]+):([0-9]+)', 7, msg_s), Action = extract(@'Action: ([\\w]+)', 1, msg_s), Firewall = Resource | extend Destination = iif(isempty(FirstDestination), ICMPDestination, FirstDestination), Action = iif(isempty(Action), NATAction, Action), DestinationPort = iif(Protocol == 'ICMP', ICMPType, DestinationPort) | where isempty('{SelectedSource}') or ('{SelectedSource}' !has ',' and Source =~ '{SelectedSource}') or ('{SelectedSource}' has ',' and Source in~ (split('{SelectedSource}', ','))) | summarize Hits = count() by Destination, NATDestination | project Hits, Destination, NATDestination | sort by Hits desc",
                "size": 1,
                "showAnalytics": true,
                "showExportToExcel": true,
                "title": "Select destination ({$rowCount} in {$queryTime})",
                "noDataMessage": "Found no matching events.",
                "noDataMessageStyle": 2,
                "timeContext": {
                  "durationMs": 14400000
                },
                "timeContextFromParameter": "TimeRange",
                "exportMultipleValues": true,
                "exportedParameters": [
                  {
                    "fieldName": "Destination",
                    "parameterName": "SelectedDestination",
                    "parameterType": 1,
                    "quote": "",
                    "delimiter": ","
                  },
                  {
                    "fieldName": "NATDestination",
                    "parameterName": "SelectedNATDestination",
                    "parameterType": 1,
                    "quote": "",
                    "delimiter": ","
                  }
                ],
                "queryType": 0,
                "resourceType": "microsoft.operationalinsights/workspaces",
                "crossComponentResources": [
                  "{Workspaces}"
                ],
                "gridSettings": {
                  "formatters": [
                    {
                      "columnMatch": "Hits",
                      "formatter": 8,
                      "formatOptions": {
                        "palette": "whiteBlack"
                      },
                      "numberFormat": {
                        "unit": 17,
                        "options": {
                          "style": "decimal",
                          "useGrouping": false,
                          "maximumSignificantDigits": 4
                        }
                      }
                    }
                  ],
                  "rowLimit": 10000,
                  "filter": true
                }
              }
            },
            {
              "type": 9,
              "name": "NetRuleLogSearchParameters",
              "content": {
                "version": "KqlParameterItem/1.0",
                "parameters": [
                  {
                    "id": "0e25640a-51f8-4fec-8489-586b17b21602",
                    "version": "KqlParameterItem/1.0",
                    "name": "AFAction",
                    "label": "Action",
                    "type": 10,
                    "isRequired": true,
                    "value": "All",
                    "typeSettings": {
                      "additionalResourceOptions": [],
                      "showDefault": false
                    },
                    "jsonData": "[\"All\",\"Allow\",\"Deny\"]",
                    "timeContext": {
                      "durationMs": 0
                    },
                    "timeContextFromParameter": "TimeRange"
                  },
                  {
                    "id": "fbab8ae6-d8da-4530-a096-e06cc53e5cf6",
                    "version": "KqlParameterItem/1.0",
                    "name": "AFSourcePort",
                    "label": "SourcePort",
                    "type": 2,
                    "isRequired": true,
                    "query": "AzureDiagnostics | where ResourceType == 'AZUREFIREWALLS' and Category == 'AzureFirewallNetworkRule' and OperationName == 'AzureFirewallNetworkRuleLog'  and msg_s matches regex @'request from ([^ :]+):([0-9]+)' | where ('{Resource:label}' !has ',' and Resource =~ '{Resource:label}') or ('{Resource:label}' has ',' and Resource in~ (split('{Resource:label}', ', '))) | extend SourcePort = extract(@'request from ([^ :]+):([0-9]+)', 2, msg_s) | summarize by SourcePort | sort by SourcePort asc",
                    "typeSettings": {
                      "additionalResourceOptions": [
                        "value::all"
                      ],
                      "selectAllValue": "All",
                      "showDefault": false
                    },
                    "timeContext": {
                      "durationMs": 14400000
                    },
                    "timeContextFromParameter": "TimeRange",
                    "defaultValue": "value::all",
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "crossComponentResources": [
                      "{Workspaces}"
                    ]
                  },
                  {
                    "id": "625ea648-787e-426d-997c-a4e4fb9dc8a4",
                    "version": "KqlParameterItem/1.0",
                    "name": "AFDestinationPort",
                    "label": "DestinationPort",
                    "type": 2,
                    "isRequired": true,
                    "query": "AzureDiagnostics | where ResourceType == 'AZUREFIREWALLS' and Category == 'AzureFirewallNetworkRule' and OperationName == 'AzureFirewallNetworkRuleLog'  | where ('{Resource:label}' !has ',' and Resource =~ '{Resource:label}') or ('{Resource:label}' has ',' and Resource in~ (split('{Resource:label}', ', '))) | extend Protocol = extract(@'^([\\S]+)', 1, msg_s), ICMPType = extract(@'^ICMP Type=([\\S]+)', 1, msg_s), DestinationPort = extract(@'request from ([^ :]+):([0-9]+) to ([^ :]+):([0-9]+)', 4, msg_s) | extend DestinationPort = iif(Protocol == 'ICMP', ICMPType, DestinationPort) | summarize by DestinationPort | sort by DestinationPort asc",
                    "typeSettings": {
                      "additionalResourceOptions": [
                        "value::all"
                      ],
                      "selectAllValue": "All",
                      "showDefault": false
                    },
                    "timeContext": {
                      "durationMs": 14400000
                    },
                    "timeContextFromParameter": "TimeRange",
                    "defaultValue": "value::all",
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "crossComponentResources": [
                      "{Workspaces}"
                    ]
                  },
                  {
                    "id": "90c7e0d4-fc2f-40a5-b334-70e63cb0945a",
                    "version": "KqlParameterItem/1.0",
                    "name": "AFProtocol",
                    "label": "Protocol",
                    "type": 2,
                    "isRequired": true,
                    "query": "AzureDiagnostics | where ResourceType == 'AZUREFIREWALLS' and Category == 'AzureFirewallNetworkRule' and OperationName == 'AzureFirewallNetworkRuleLog'  | where ('{Resource:label}' !has ',' and Resource =~ '{Resource:label}') or ('{Resource:label}' has ',' and Resource in~ (split('{Resource:label}', ', '))) | extend Protocol = extract(@'^([\\S]+)', 1, msg_s) | summarize by Protocol | sort by Protocol asc",
                    "typeSettings": {
                      "additionalResourceOptions": [
                        "value::all"
                      ],
                      "selectAllValue": "All",
                      "showDefault": false
                    },
                    "timeContext": {
                      "durationMs": 14400000
                    },
                    "timeContextFromParameter": "TimeRange",
                    "defaultValue": "value::all",
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "crossComponentResources": [
                      "{Workspaces}"
                    ]
                  }
                ],
                "style": "pills",
                "queryType": 0,
                "resourceType": "microsoft.operationalinsights/workspaces"
              },
              "conditionalVisibility": {
                "parameterName": "selectedNetRuleTab",
                "comparison": "isNotEqualTo",
                "value": "Statistics"
              }
            },
            {
              "type": 3,
              "name": "NetRuleSearchQuery",
              "content": {
                "version": "KqlItem/1.0",
                "query": "let geoData = externaldata(network:string,geoname_id:string,continent_code:string,continent_name:string,country_iso_code:string,country_name:string,is_anonymous_proxy:string,is_satellite_provider:string)[@'https://raw.githubusercontent.com/datasets/geoip2-ipv4/master/data/geoip2-ipv4.csv'] with (ignoreFirstRecord=true, format='csv');AzureDiagnostics | where ResourceType == 'AZUREFIREWALLS' and Category == 'AzureFirewallNetworkRule' and OperationName == 'AzureFirewallNetworkRuleLog'  | where ('{Resource:label}' !has ',' and Resource =~ '{Resource:label}') or ('{Resource:label}' has ',' and Resource in~ (split('{Resource:label}', ', '))) | extend Protocol = extract(@'^([\\S]+)', 1, msg_s), ICMPType = extract(@'^ICMP Type=([\\S]+)', 1, msg_s), Source = extract(@'request from ([^ :]+)', 1, msg_s), SourcePort = extract(@'request from ([^ :]+):([0-9]+)', 2, msg_s), FirstDestination = extract(@'request from ([^ :]+):([0-9]+) to ([^ :]+)', 3, msg_s), ICMPDestination = trim_end(@'\\.', extract(@'request from ([^ :]+) to ([^ :]+)', 2, msg_s)), DestinationPort = extract(@'request from ([^ :]+):([0-9]+) to ([^ :]+):([0-9]+)', 4, msg_s), NATAction = extract(@'request from ([^ :]+):([0-9]+) to ([^ :]+):([0-9]+) was ([\\S]+) to', 5, msg_s), NATDestination = extract(@'request from ([^ :]+):([0-9]+) to ([^ :]+):([0-9]+) was ([\\S]+) to ([^ :]+)', 6, msg_s), NATDestinationPort = extract(@'request from ([^ :]+):([0-9]+) to ([^ :]+):([0-9]+) was ([\\S]+) to ([^ :]+):([0-9]+)', 7, msg_s), Action = extract(@'Action: ([\\w]+)', 1, msg_s), Firewall = Resource | extend Destination = iif(isempty(FirstDestination), ICMPDestination, FirstDestination), Action = iif(isempty(Action), NATAction, Action), DestinationPort = iif(Protocol == 'ICMP', ICMPType, DestinationPort) | where isempty('{SelectedSource}') or ('{SelectedSource}' !has ',' and Source =~ '{SelectedSource}') or ('{SelectedSource}' has ',' and Source in~ (split('{SelectedSource}', ','))) | where isempty('{SelectedDestination}') or ('{SelectedDestination}' !has ',' and Destination =~ '{SelectedDestination}') or ('{SelectedDestination}' has ',' and Destination in~ (split('{SelectedDestination}', ','))) | where isempty('{SelectedNATDestination}') or ('{SelectedNATDestination}' !has ',' and NATDestination =~ '{SelectedNATDestination}') or ('{SelectedNATDestination}' has ',' and NATDestination in~ (split('{SelectedNATDestination}', ','))) | where '{AFAction:label}' == 'All' or Action == '{AFAction:label}' | where '{AFSourcePort:label}' == 'All' or SourcePort == '{AFSourcePort:label}' | where '{AFDestinationPort:label}' == 'All' or DestinationPort == '{AFDestinationPort:label}' or NATDestinationPort == '{AFDestinationPort:label}' | where '{AFProtocol:label}' == 'All' or Protocol == '{AFProtocol:label}' | evaluate ipv4_lookup(geoData, Destination, network, return_unmatched = true) | summarize by TimeGenerated, Firewall, Action, Source, SourcePort, Destination, DestinationPort, NATDestination, NATDestinationPort, Protocol, Continent = iif(isempty(continent_name), 'Unmatched', continent_name), Country = iif(isempty(country_name), 'Unmatched', country_name), LogMessage = msg_s | sort by TimeGenerated desc",
                "size": 2,
                "showAnalytics": true,
                "showExportToExcel": true,
                "title": "Firewall network rule log ({$rowCount} in {$queryTime})",
                "noDataMessage": "Found no matching events.",
                "noDataMessageStyle": 2,
                "timeContext": {
                  "durationMs": 14400000
                },
                "timeContextFromParameter": "TimeRange",
                "queryType": 0,
                "resourceType": "microsoft.operationalinsights/workspaces",
                "crossComponentResources": [
                  "{Workspaces}"
                ],
                "gridSettings": {
                  "rowLimit": 10000,
                  "filter": true
                }
              },
              "conditionalVisibility": {
                "parameterName": "selectedNetRuleTab",
                "comparison": "isEqualTo",
                "value": "Search"
              }
            },
            {
              "type": 3,
              "name": "AFNetActionPieQuery",
              "customWidth": "25",
              "content": {
                "version": "KqlItem/1.0",
                "query": "AzureDiagnostics | where ResourceType == 'AZUREFIREWALLS' and Category == 'AzureFirewallNetworkRule' and OperationName == 'AzureFirewallNetworkRuleLog'  | where ('{Resource:label}' !has ',' and Resource =~ '{Resource:label}') or ('{Resource:label}' has ',' and Resource in~ (split('{Resource:label}', ', '))) | extend Protocol = extract(@'^([\\S]+)', 1, msg_s), ICMPType = extract(@'^ICMP Type=([\\S]+)', 1, msg_s), Source = extract(@'request from ([^ :]+)', 1, msg_s), SourcePort = extract(@'request from ([^ :]+):([0-9]+)', 2, msg_s), FirstDestination = extract(@'request from ([^ :]+):([0-9]+) to ([^ :]+)', 3, msg_s), ICMPDestination = trim_end(@'\\.', extract(@'request from ([^ :]+) to ([^ :]+)', 2, msg_s)), DestinationPort = extract(@'request from ([^ :]+):([0-9]+) to ([^ :]+):([0-9]+)', 4, msg_s), NATAction = extract(@'request from ([^ :]+):([0-9]+) to ([^ :]+):([0-9]+) was ([\\S]+) to', 5, msg_s), NATDestination = extract(@'request from ([^ :]+):([0-9]+) to ([^ :]+):([0-9]+) was ([\\S]+) to ([^ :]+)', 6, msg_s), NATDestinationPort = extract(@'request from ([^ :]+):([0-9]+) to ([^ :]+):([0-9]+) was ([\\S]+) to ([^ :]+):([0-9]+)', 7, msg_s), Action = extract(@'Action: ([\\w]+)', 1, msg_s), Firewall = Resource | extend Destination = iif(isempty(FirstDestination), ICMPDestination, FirstDestination), Action = iif(isempty(Action), NATAction, Action), DestinationPort = iif(Protocol == 'ICMP', ICMPType, DestinationPort) | where isempty('{SelectedSource}') or ('{SelectedSource}' !has ',' and Source =~ '{SelectedSource}') or ('{SelectedSource}' has ',' and Source in~ (split('{SelectedSource}', ','))) | where isempty('{SelectedDestination}') or ('{SelectedDestination}' !has ',' and Destination =~ '{SelectedDestination}') or ('{SelectedDestination}' has ',' and Destination in~ (split('{SelectedDestination}', ','))) | where isempty('{SelectedNATDestination}') or ('{SelectedNATDestination}' !has ',' and NATDestination =~ '{SelectedNATDestination}') or ('{SelectedNATDestination}' has ',' and NATDestination in~ (split('{SelectedNATDestination}', ','))) | summarize Hits = count() by Action | project Hits, Action | sort by Hits desc",
                "size": 0,
                "showAnalytics": true,
                "title": "Hits by action ({$rowCount} in {$queryTime})",
                "noDataMessage": "Found no matching events.",
                "noDataMessageStyle": 2,
                "timeContext": {
                  "durationMs": 0
                },
                "timeContextFromParameter": "TimeRange",
                "queryType": 0,
                "resourceType": "microsoft.operationalinsights/workspaces",
                "crossComponentResources": [
                  "{Workspaces}"
                ],
                "visualization": "piechart"
              },
              "conditionalVisibility": {
                "parameterName": "selectedNetRuleTab",
                "comparison": "isEqualTo",
                "value": "Statistics"
              }
            },
            {
              "type": 3,
              "name": "AFNetProtocolPieQuery",
              "customWidth": "25",
              "content": {
                "version": "KqlItem/1.0",
                "query": "AzureDiagnostics | where ResourceType == 'AZUREFIREWALLS' and Category == 'AzureFirewallNetworkRule' and OperationName == 'AzureFirewallNetworkRuleLog'  | where ('{Resource:label}' !has ',' and Resource =~ '{Resource:label}') or ('{Resource:label}' has ',' and Resource in~ (split('{Resource:label}', ', '))) | extend Protocol = extract(@'^([\\S]+)', 1, msg_s), ICMPType = extract(@'^ICMP Type=([\\S]+)', 1, msg_s), Source = extract(@'request from ([^ :]+)', 1, msg_s), SourcePort = extract(@'request from ([^ :]+):([0-9]+)', 2, msg_s), FirstDestination = extract(@'request from ([^ :]+):([0-9]+) to ([^ :]+)', 3, msg_s), ICMPDestination = trim_end(@'\\.', extract(@'request from ([^ :]+) to ([^ :]+)', 2, msg_s)), DestinationPort = extract(@'request from ([^ :]+):([0-9]+) to ([^ :]+):([0-9]+)', 4, msg_s), NATAction = extract(@'request from ([^ :]+):([0-9]+) to ([^ :]+):([0-9]+) was ([\\S]+) to', 5, msg_s), NATDestination = extract(@'request from ([^ :]+):([0-9]+) to ([^ :]+):([0-9]+) was ([\\S]+) to ([^ :]+)', 6, msg_s), NATDestinationPort = extract(@'request from ([^ :]+):([0-9]+) to ([^ :]+):([0-9]+) was ([\\S]+) to ([^ :]+):([0-9]+)', 7, msg_s), Action = extract(@'Action: ([\\w]+)', 1, msg_s), Firewall = Resource | extend Destination = iif(isempty(FirstDestination), ICMPDestination, FirstDestination), Action = iif(isempty(Action), NATAction, Action), DestinationPort = iif(Protocol == 'ICMP', ICMPType, DestinationPort) | where isempty('{SelectedSource}') or ('{SelectedSource}' !has ',' and Source =~ '{SelectedSource}') or ('{SelectedSource}' has ',' and Source in~ (split('{SelectedSource}', ','))) | where isempty('{SelectedDestination}') or ('{SelectedDestination}' !has ',' and Destination =~ '{SelectedDestination}') or ('{SelectedDestination}' has ',' and Destination in~ (split('{SelectedDestination}', ','))) | where isempty('{SelectedNATDestination}') or ('{SelectedNATDestination}' !has ',' and NATDestination =~ '{SelectedNATDestination}') or ('{SelectedNATDestination}' has ',' and NATDestination in~ (split('{SelectedNATDestination}', ','))) | summarize Hits = count() by Protocol | project Hits, Protocol | sort by Hits desc",
                "size": 0,
                "showAnalytics": true,
                "title": "Hits by protocol ({$rowCount} in {$queryTime})",
                "noDataMessage": "Found no matching events.",
                "noDataMessageStyle": 2,
                "timeContext": {
                  "durationMs": 0
                },
                "timeContextFromParameter": "TimeRange",
                "queryType": 0,
                "resourceType": "microsoft.operationalinsights/workspaces",
                "crossComponentResources": [
                  "{Workspaces}"
                ],
                "visualization": "piechart"
              },
              "conditionalVisibility": {
                "parameterName": "selectedNetRuleTab",
                "comparison": "isEqualTo",
                "value": "Statistics"
              }
            },
            {
              "type": 3,
              "name": "AFNetDestPortPieQuery",
              "customWidth": "25",
              "content": {
                "version": "KqlItem/1.0",
                "query": "AzureDiagnostics | where ResourceType == 'AZUREFIREWALLS' and Category == 'AzureFirewallNetworkRule' and OperationName == 'AzureFirewallNetworkRuleLog'  | where ('{Resource:label}' !has ',' and Resource =~ '{Resource:label}') or ('{Resource:label}' has ',' and Resource in~ (split('{Resource:label}', ', '))) | extend Protocol = extract(@'^([\\S]+)', 1, msg_s), ICMPType = extract(@'^ICMP Type=([\\S]+)', 1, msg_s), Source = extract(@'request from ([^ :]+)', 1, msg_s), SourcePort = extract(@'request from ([^ :]+):([0-9]+)', 2, msg_s), FirstDestination = extract(@'request from ([^ :]+):([0-9]+) to ([^ :]+)', 3, msg_s), ICMPDestination = trim_end(@'\\.', extract(@'request from ([^ :]+) to ([^ :]+)', 2, msg_s)), DestinationPort = extract(@'request from ([^ :]+):([0-9]+) to ([^ :]+):([0-9]+)', 4, msg_s), NATAction = extract(@'request from ([^ :]+):([0-9]+) to ([^ :]+):([0-9]+) was ([\\S]+) to', 5, msg_s), NATDestination = extract(@'request from ([^ :]+):([0-9]+) to ([^ :]+):([0-9]+) was ([\\S]+) to ([^ :]+)', 6, msg_s), NATDestinationPort = extract(@'request from ([^ :]+):([0-9]+) to ([^ :]+):([0-9]+) was ([\\S]+) to ([^ :]+):([0-9]+)', 7, msg_s), Action = extract(@'Action: ([\\w]+)', 1, msg_s), Firewall = Resource | extend Destination = iif(isempty(FirstDestination), ICMPDestination, FirstDestination), Action = iif(isempty(Action), NATAction, Action), DestinationPort = iif(Protocol == 'ICMP', ICMPType, DestinationPort) | where isempty('{SelectedSource}') or ('{SelectedSource}' !has ',' and Source =~ '{SelectedSource}') or ('{SelectedSource}' has ',' and Source in~ (split('{SelectedSource}', ','))) | where isempty('{SelectedDestination}') or ('{SelectedDestination}' !has ',' and Destination =~ '{SelectedDestination}') or ('{SelectedDestination}' has ',' and Destination in~ (split('{SelectedDestination}', ','))) | where isempty('{SelectedNATDestination}') or ('{SelectedNATDestination}' !has ',' and NATDestination =~ '{SelectedNATDestination}') or ('{SelectedNATDestination}' has ',' and NATDestination in~ (split('{SelectedNATDestination}', ','))) | summarize Hits = count() by DestinationPort | project Hits, Port = DestinationPort | sort by Hits desc",
                "size": 0,
                "showAnalytics": true,
                "title": "Hits by destination port ({$rowCount} in {$queryTime})",
                "noDataMessage": "Found no matching events.",
                "noDataMessageStyle": 2,
                "timeContext": {
                  "durationMs": 0
                },
                "timeContextFromParameter": "TimeRange",
                "queryType": 0,
                "resourceType": "microsoft.operationalinsights/workspaces",
                "crossComponentResources": [
                  "{Workspaces}"
                ],
                "visualization": "piechart"
              },
              "conditionalVisibility": {
                "parameterName": "selectedNetRuleTab",
                "comparison": "isEqualTo",
                "value": "Statistics"
              }
            },
            {
              "type": 3,
              "name": "AFNetLocationPieQuery",
              "customWidth": "25",
              "content": {
                "version": "KqlItem/1.0",
                "query": "let geoData = externaldata(network:string,geoname_id:string,continent_code:string,continent_name:string,country_iso_code:string,country_name:string,is_anonymous_proxy:string,is_satellite_provider:string)[@'https://raw.githubusercontent.com/datasets/geoip2-ipv4/master/data/geoip2-ipv4.csv'] with (ignoreFirstRecord=true, format='csv');AzureDiagnostics | where ResourceType == 'AZUREFIREWALLS' and Category == 'AzureFirewallNetworkRule' and OperationName == 'AzureFirewallNetworkRuleLog'  | where ('{Resource:label}' !has ',' and Resource =~ '{Resource:label}') or ('{Resource:label}' has ',' and Resource in~ (split('{Resource:label}', ', '))) | extend Protocol = extract(@'^([\\S]+)', 1, msg_s), ICMPType = extract(@'^ICMP Type=([\\S]+)', 1, msg_s), Source = extract(@'request from ([^ :]+)', 1, msg_s), SourcePort = extract(@'request from ([^ :]+):([0-9]+)', 2, msg_s), FirstDestination = extract(@'request from ([^ :]+):([0-9]+) to ([^ :]+)', 3, msg_s), ICMPDestination = trim_end(@'\\.', extract(@'request from ([^ :]+) to ([^ :]+)', 2, msg_s)), DestinationPort = extract(@'request from ([^ :]+):([0-9]+) to ([^ :]+):([0-9]+)', 4, msg_s), NATAction = extract(@'request from ([^ :]+):([0-9]+) to ([^ :]+):([0-9]+) was ([\\S]+) to', 5, msg_s), NATDestination = extract(@'request from ([^ :]+):([0-9]+) to ([^ :]+):([0-9]+) was ([\\S]+) to ([^ :]+)', 6, msg_s), NATDestinationPort = extract(@'request from ([^ :]+):([0-9]+) to ([^ :]+):([0-9]+) was ([\\S]+) to ([^ :]+):([0-9]+)', 7, msg_s), Action = extract(@'Action: ([\\w]+)', 1, msg_s), Firewall = Resource | extend Destination = iif(isempty(FirstDestination), ICMPDestination, FirstDestination), Action = iif(isempty(Action), NATAction, Action), DestinationPort = iif(Protocol == 'ICMP', ICMPType, DestinationPort) | where isempty('{SelectedSource}') or ('{SelectedSource}' !has ',' and Source =~ '{SelectedSource}') or ('{SelectedSource}' has ',' and Source in~ (split('{SelectedSource}', ','))) | where isempty('{SelectedDestination}') or ('{SelectedDestination}' !has ',' and Destination =~ '{SelectedDestination}') or ('{SelectedDestination}' has ',' and Destination in~ (split('{SelectedDestination}', ','))) | where isempty('{SelectedNATDestination}') or ('{SelectedNATDestination}' !has ',' and NATDestination =~ '{SelectedNATDestination}') or ('{SelectedNATDestination}' has ',' and NATDestination in~ (split('{SelectedNATDestination}', ','))) | evaluate ipv4_lookup(geoData, Destination, network, return_unmatched = true) | summarize Hits = count() by continent_name | project Hits, Continent = iif(isempty(continent_name), 'Unmatched', continent_name) | sort by Hits",
                "size": 0,
                "showAnalytics": true,
                "title": "Hits by destination continent ({$rowCount} in {$queryTime})",
                "noDataMessage": "Found no matching events.",
                "noDataMessageStyle": 2,
                "timeContext": {
                  "durationMs": 0
                },
                "timeContextFromParameter": "TimeRange",
                "queryType": 0,
                "resourceType": "microsoft.operationalinsights/workspaces",
                "crossComponentResources": [
                  "{Workspaces}"
                ],
                "visualization": "piechart"
              },
              "conditionalVisibility": {
                "parameterName": "selectedNetRuleTab",
                "comparison": "isEqualTo",
                "value": "Statistics"
              }
            },
            {
              "type": 3,
              "name": "AFNetDeniedDestPortQuery",
              "customWidth": "50",
              "content": {
                "version": "KqlItem/1.0",
                "query": "AzureDiagnostics | where ResourceType == 'AZUREFIREWALLS' and Category == 'AzureFirewallNetworkRule' and OperationName == 'AzureFirewallNetworkRuleLog'  | where ('{Resource:label}' !has ',' and Resource =~ '{Resource:label}') or ('{Resource:label}' has ',' and Resource in~ (split('{Resource:label}', ', '))) | extend Protocol = extract(@'^([\\S]+)', 1, msg_s), ICMPType = extract(@'^ICMP Type=([\\S]+)', 1, msg_s), Source = extract(@'request from ([^ :]+)', 1, msg_s), SourcePort = extract(@'request from ([^ :]+):([0-9]+)', 2, msg_s), FirstDestination = extract(@'request from ([^ :]+):([0-9]+) to ([^ :]+)', 3, msg_s), ICMPDestination = trim_end(@'\\.', extract(@'request from ([^ :]+) to ([^ :]+)', 2, msg_s)), DestinationPort = extract(@'request from ([^ :]+):([0-9]+) to ([^ :]+):([0-9]+)', 4, msg_s), NATAction = extract(@'request from ([^ :]+):([0-9]+) to ([^ :]+):([0-9]+) was ([\\S]+) to', 5, msg_s), NATDestination = extract(@'request from ([^ :]+):([0-9]+) to ([^ :]+):([0-9]+) was ([\\S]+) to ([^ :]+)', 6, msg_s), NATDestinationPort = extract(@'request from ([^ :]+):([0-9]+) to ([^ :]+):([0-9]+) was ([\\S]+) to ([^ :]+):([0-9]+)', 7, msg_s), Action = extract(@'Action: ([\\w]+)', 1, msg_s), Firewall = Resource | extend Destination = iif(isempty(FirstDestination), ICMPDestination, FirstDestination), Action = iif(isempty(Action), NATAction, Action), DestinationPort = iif(Protocol == 'ICMP', ICMPType, DestinationPort) | where Action == 'Deny' | where isempty('{SelectedSource}') or ('{SelectedSource}' !has ',' and Source =~ '{SelectedSource}') or ('{SelectedSource}' has ',' and Source in~ (split('{SelectedSource}', ','))) | where isempty('{SelectedDestination}') or ('{SelectedDestination}' !has ',' and Destination =~ '{SelectedDestination}') or ('{SelectedDestination}' has ',' and Destination in~ (split('{SelectedDestination}', ','))) | where isempty('{SelectedNATDestination}') or ('{SelectedNATDestination}' !has ',' and NATDestination =~ '{SelectedNATDestination}') or ('{SelectedNATDestination}' has ',' and NATDestination in~ (split('{SelectedNATDestination}', ','))) | summarize Hits = count() by Firewall, Destination, DestinationPort, NATDestination, NATDestinationPort | project Hits, Destination, Port = DestinationPort, NATDestination, NATPort = NATDestinationPort, Firewall | sort by Hits desc",
                "size": 1,
                "showAnalytics": true,
                "title": "Denied hits by firewall, destination and port ({$rowCount} in {$queryTime})",
                "noDataMessage": "Found no matching events.",
                "noDataMessageStyle": 2,
                "timeContext": {
                  "durationMs": 14400000
                },
                "timeContextFromParameter": "TimeRange",
                "showExportToExcel": true,
                "queryType": 0,
                "resourceType": "microsoft.operationalinsights/workspaces",
                "crossComponentResources": [
                  "{Workspaces}"
                ],
                "visualization": "table",
                "gridSettings": {
                  "formatters": [
                    {
                      "columnMatch": "Hits",
                      "formatter": 8,
                      "formatOptions": {
                        "palette": "whiteBlack"
                      },
                      "numberFormat": {
                        "unit": 17,
                        "options": {
                          "style": "decimal",
                          "useGrouping": false,
                          "maximumSignificantDigits": 4
                        }
                      }
                    }
                  ]
                },
                "sortBy": []
              },
              "conditionalVisibility": {
                "parameterName": "selectedNetRuleTab",
                "comparison": "isEqualTo",
                "value": "Statistics"
              }
            },
            {
              "type": 3,
              "name": "AFNetAllowedDestPortQuery",
              "customWidth": "50",
              "content": {
                "version": "KqlItem/1.0",
                "query": "AzureDiagnostics | where ResourceType == 'AZUREFIREWALLS' and Category == 'AzureFirewallNetworkRule' and OperationName == 'AzureFirewallNetworkRuleLog'  | where ('{Resource:label}' !has ',' and Resource =~ '{Resource:label}') or ('{Resource:label}' has ',' and Resource in~ (split('{Resource:label}', ', '))) | extend Protocol = extract(@'^([\\S]+)', 1, msg_s), ICMPType = extract(@'^ICMP Type=([\\S]+)', 1, msg_s), Source = extract(@'request from ([^ :]+)', 1, msg_s), SourcePort = extract(@'request from ([^ :]+):([0-9]+)', 2, msg_s), FirstDestination = extract(@'request from ([^ :]+):([0-9]+) to ([^ :]+)', 3, msg_s), ICMPDestination = trim_end(@'\\.', extract(@'request from ([^ :]+) to ([^ :]+)', 2, msg_s)), DestinationPort = extract(@'request from ([^ :]+):([0-9]+) to ([^ :]+):([0-9]+)', 4, msg_s), NATAction = extract(@'request from ([^ :]+):([0-9]+) to ([^ :]+):([0-9]+) was ([\\S]+) to', 5, msg_s), NATDestination = extract(@'request from ([^ :]+):([0-9]+) to ([^ :]+):([0-9]+) was ([\\S]+) to ([^ :]+)', 6, msg_s), NATDestinationPort = extract(@'request from ([^ :]+):([0-9]+) to ([^ :]+):([0-9]+) was ([\\S]+) to ([^ :]+):([0-9]+)', 7, msg_s), Action = extract(@'Action: ([\\w]+)', 1, msg_s), Firewall = Resource | extend Destination = iif(isempty(FirstDestination), ICMPDestination, FirstDestination), Action = iif(isempty(Action), NATAction, Action), DestinationPort = iif(Protocol == 'ICMP', ICMPType, DestinationPort) | where Action == 'Allow' | where isempty('{SelectedSource}') or ('{SelectedSource}' !has ',' and Source =~ '{SelectedSource}') or ('{SelectedSource}' has ',' and Source in~ (split('{SelectedSource}', ','))) | where isempty('{SelectedDestination}') or ('{SelectedDestination}' !has ',' and Destination =~ '{SelectedDestination}') or ('{SelectedDestination}' has ',' and Destination in~ (split('{SelectedDestination}', ','))) | where isempty('{SelectedNATDestination}') or ('{SelectedNATDestination}' !has ',' and NATDestination =~ '{SelectedNATDestination}') or ('{SelectedNATDestination}' has ',' and NATDestination in~ (split('{SelectedNATDestination}', ','))) | summarize Hits = count() by Firewall, Destination, DestinationPort, NATDestination, NATDestinationPort | project Hits, Destination, Port = DestinationPort, NATDestination, NATPort = NATDestinationPort, Firewall | sort by Hits desc",
                "size": 1,
                "showAnalytics": true,
                "title": "Allowed hits by firewall, destination and port ({$rowCount} in {$queryTime})",
                "noDataMessage": "Found no matching events.",
                "noDataMessageStyle": 2,
                "timeContext": {
                  "durationMs": 14400000
                },
                "timeContextFromParameter": "TimeRange",
                "showExportToExcel": true,
                "queryType": 0,
                "resourceType": "microsoft.operationalinsights/workspaces",
                "crossComponentResources": [
                  "{Workspaces}"
                ],
                "visualization": "table",
                "gridSettings": {
                  "formatters": [
                    {
                      "columnMatch": "Hits",
                      "formatter": 8,
                      "formatOptions": {
                        "palette": "whiteBlack"
                      },
                      "numberFormat": {
                        "unit": 17,
                        "options": {
                          "style": "decimal",
                          "useGrouping": false,
                          "maximumSignificantDigits": 4
                        }
                      }
                    }
                  ]
                },
                "sortBy": []
              },
              "conditionalVisibility": {
                "parameterName": "selectedNetRuleTab",
                "comparison": "isEqualTo",
                "value": "Statistics"
              }
            },
            {
              "type": 3,
              "name": "AFNetDeniedDestChartQuery",
              "customWidth": "50",
              "content": {
                "version": "KqlItem/1.0",
                "query": "AzureDiagnostics | where ResourceType == 'AZUREFIREWALLS' and Category == 'AzureFirewallNetworkRule' and OperationName == 'AzureFirewallNetworkRuleLog'  | where ('{Resource:label}' !has ',' and Resource =~ '{Resource:label}') or ('{Resource:label}' has ',' and Resource in~ (split('{Resource:label}', ', '))) | extend Protocol = extract(@'^([\\S]+)', 1, msg_s), ICMPType = extract(@'^ICMP Type=([\\S]+)', 1, msg_s), Source = extract(@'request from ([^ :]+)', 1, msg_s), SourcePort = extract(@'request from ([^ :]+):([0-9]+)', 2, msg_s), FirstDestination = extract(@'request from ([^ :]+):([0-9]+) to ([^ :]+)', 3, msg_s), ICMPDestination = trim_end(@'\\.', extract(@'request from ([^ :]+) to ([^ :]+)', 2, msg_s)), DestinationPort = extract(@'request from ([^ :]+):([0-9]+) to ([^ :]+):([0-9]+)', 4, msg_s), NATAction = extract(@'request from ([^ :]+):([0-9]+) to ([^ :]+):([0-9]+) was ([\\S]+) to', 5, msg_s), NATDestination = extract(@'request from ([^ :]+):([0-9]+) to ([^ :]+):([0-9]+) was ([\\S]+) to ([^ :]+)', 6, msg_s), NATDestinationPort = extract(@'request from ([^ :]+):([0-9]+) to ([^ :]+):([0-9]+) was ([\\S]+) to ([^ :]+):([0-9]+)', 7, msg_s), Action = extract(@'Action: ([\\w]+)', 1, msg_s), Firewall = Resource | extend Destination = iif(isempty(FirstDestination), ICMPDestination, FirstDestination), Action = iif(isempty(Action), NATAction, Action), DestinationPort = iif(Protocol == 'ICMP', ICMPType, DestinationPort) | where Action == 'Deny' | where isempty('{SelectedSource}') or ('{SelectedSource}' !has ',' and Source =~ '{SelectedSource}') or ('{SelectedSource}' has ',' and Source in~ (split('{SelectedSource}', ','))) | where isempty('{SelectedDestination}') or ('{SelectedDestination}' !has ',' and Destination =~ '{SelectedDestination}') or ('{SelectedDestination}' has ',' and Destination in~ (split('{SelectedDestination}', ','))) | where isempty('{SelectedNATDestination}') or ('{SelectedNATDestination}' !has ',' and NATDestination =~ '{SelectedNATDestination}') or ('{SelectedNATDestination}' has ',' and NATDestination in~ (split('{SelectedNATDestination}', ','))) | extend Destination = iif(isempty(DestinationPort), Destination, strcat(Destination, ':', DestinationPort)) | summarize Hits = count() by Destination, bin(TimeGenerated, {TimeRange:grain})",
                "size": 1,
                "showAnalytics": true,
                "title": "Denied hits by destination and port ({$rowCount} in {$queryTime})",
                "noDataMessage": "Found no matching events.",
                "noDataMessageStyle": 2,
                "timeContext": {
                  "durationMs": 14400000
                },
                "timeContextFromParameter": "TimeRange",
                "queryType": 0,
                "resourceType": "microsoft.operationalinsights/workspaces",
                "crossComponentResources": [
                  "{Workspaces}"
                ],
                "visualization": "timechart",
                "tileSettings": {
                  "showBorder": false
                },
                "chartSettings": {
                  "showLegend": true
                }
              },
              "conditionalVisibility": {
                "parameterName": "selectedNetRuleTab",
                "comparison": "isEqualTo",
                "value": "Statistics"
              }
            },
            {
              "type": 3,
              "name": "AFNetAllowedDestChartQuery",
              "customWidth": "50",
              "content": {
                "version": "KqlItem/1.0",
                "query": "AzureDiagnostics | where ResourceType == 'AZUREFIREWALLS' and Category == 'AzureFirewallNetworkRule' and OperationName == 'AzureFirewallNetworkRuleLog'  | where ('{Resource:label}' !has ',' and Resource =~ '{Resource:label}') or ('{Resource:label}' has ',' and Resource in~ (split('{Resource:label}', ', '))) | extend Protocol = extract(@'^([\\S]+)', 1, msg_s), ICMPType = extract(@'^ICMP Type=([\\S]+)', 1, msg_s), Source = extract(@'request from ([^ :]+)', 1, msg_s), SourcePort = extract(@'request from ([^ :]+):([0-9]+)', 2, msg_s), FirstDestination = extract(@'request from ([^ :]+):([0-9]+) to ([^ :]+)', 3, msg_s), ICMPDestination = trim_end(@'\\.', extract(@'request from ([^ :]+) to ([^ :]+)', 2, msg_s)), DestinationPort = extract(@'request from ([^ :]+):([0-9]+) to ([^ :]+):([0-9]+)', 4, msg_s), NATAction = extract(@'request from ([^ :]+):([0-9]+) to ([^ :]+):([0-9]+) was ([\\S]+) to', 5, msg_s), NATDestination = extract(@'request from ([^ :]+):([0-9]+) to ([^ :]+):([0-9]+) was ([\\S]+) to ([^ :]+)', 6, msg_s), NATDestinationPort = extract(@'request from ([^ :]+):([0-9]+) to ([^ :]+):([0-9]+) was ([\\S]+) to ([^ :]+):([0-9]+)', 7, msg_s), Action = extract(@'Action: ([\\w]+)', 1, msg_s), Firewall = Resource | extend Destination = iif(isempty(FirstDestination), ICMPDestination, FirstDestination), Action = iif(isempty(Action), NATAction, Action), DestinationPort = iif(Protocol == 'ICMP', ICMPType, DestinationPort) | where Action == 'Allow' | where isempty('{SelectedSource}') or ('{SelectedSource}' !has ',' and Source =~ '{SelectedSource}') or ('{SelectedSource}' has ',' and Source in~ (split('{SelectedSource}', ','))) | where isempty('{SelectedDestination}') or ('{SelectedDestination}' !has ',' and Destination =~ '{SelectedDestination}') or ('{SelectedDestination}' has ',' and Destination in~ (split('{SelectedDestination}', ','))) | where isempty('{SelectedNATDestination}') or ('{SelectedNATDestination}' !has ',' and NATDestination =~ '{SelectedNATDestination}') or ('{SelectedNATDestination}' has ',' and NATDestination in~ (split('{SelectedNATDestination}', ','))) | extend Destination = iif(isempty(DestinationPort), Destination, strcat(Destination, ':', DestinationPort)) | summarize Hits = count() by Destination, bin(TimeGenerated, {TimeRange:grain})",
                "size": 1,
                "showAnalytics": true,
                "title": "Allowed hits by destination and port ({$rowCount} in {$queryTime})",
                "noDataMessage": "Found no matching events.",
                "noDataMessageStyle": 2,
                "timeContext": {
                  "durationMs": 14400000
                },
                "timeContextFromParameter": "TimeRange",
                "queryType": 0,
                "resourceType": "microsoft.operationalinsights/workspaces",
                "crossComponentResources": [
                  "{Workspaces}"
                ],
                "visualization": "timechart",
                "tileSettings": {
                  "showBorder": false
                },
                "chartSettings": {
                  "showLegend": true
                }
              },
              "conditionalVisibility": {
                "parameterName": "selectedNetRuleTab",
                "comparison": "isEqualTo",
                "value": "Statistics"
              }
            },
            {
              "type": 3,
              "name": "NetRuleThreatIntelSearchQuery",
              "content": {
                "version": "KqlItem/1.0",
                "query": "AzureDiagnostics | where ResourceType == 'AZUREFIREWALLS' and Category == 'AzureFirewallNetworkRule' and OperationName == 'AzureFirewallThreatIntelLog'  | where ('{Resource:label}' !has ',' and Resource =~ '{Resource:label}') or ('{Resource:label}' has ',' and Resource in~ (split('{Resource:label}', ', '))) | extend Protocol = extract(@'^([\\S]+)', 1, msg_s), Source = extract(@'request from ([^ :]+)', 1, msg_s), SourcePort = extract(@'request from ([^ :]+):([0-9]+)', 2, msg_s), Destination = extract(@'request from ([^ :]+):([0-9]+) to ([^ :]+)', 3, msg_s), DestinationPort = extract(@'request from ([^ :]+):([0-9]+) to ([^ :]+):([0-9]+)', 4, msg_s), NATAction = extract(@'request from ([^ :]+):([0-9]+) to ([^ :]+):([0-9]+) was ([\\S]+) to', 5, msg_s), NATDestination = extract(@'request from ([^ :]+):([0-9]+) to ([^ :]+):([0-9]+) was ([\\S]+) to ([^ :]+)', 6, msg_s), NATDestinationPort = extract(@'request from ([^ :]+):([0-9]+) to ([^ :]+):([0-9]+) was ([\\S]+) to ([^ :]+):([0-9]+)', 7, msg_s), Action = extract(@'Action: ([\\w]+)', 1, msg_s), Message = extract(@'ThreatIntel: (.+)', 1, msg_s), Firewall = Resource | extend Action = iif(isempty(Action), NATAction, Action) | where '{AFAction:label}' == 'All' or Action == '{AFAction:label}' | where isempty('{SelectedSource}') or ('{SelectedSource}' !has ',' and Source =~ '{SelectedSource}') or ('{SelectedSource}' has ',' and Source in~ (split('{SelectedSource}', ','))) | where isempty('{SelectedDestination}') or ('{SelectedDestination}' !has ',' and Destination =~ '{SelectedDestination}') or ('{SelectedDestination}' has ',' and Destination in~ (split('{SelectedDestination}', ','))) | where isempty('{SelectedNATDestination}') or ('{SelectedNATDestination}' !has ',' and NATDestination =~ '{SelectedNATDestination}') or ('{SelectedNATDestination}' has ',' and NATDestination in~ (split('{SelectedNATDestination}', ','))) | where '{AFSourcePort:label}' == 'All' or SourcePort == '{AFSourcePort:label}' | where '{AFDestinationPort:label}' == 'All' or DestinationPort == '{AFDestinationPort:label}' or NATDestinationPort == '{AFDestinationPort:label}' | where '{AFProtocol:label}' == 'All' or Protocol == '{AFProtocol:label}' | summarize by TimeGenerated, Firewall, Action, Source, SourcePort, Destination, DestinationPort, NATDestination, NATDestinationPort, Protocol, Message, LogMessage = msg_s | sort by TimeGenerated desc",
                "size": 2,
                "showAnalytics": true,
                "showExportToExcel": true,
                "title": "Firewall network rule threat intel log ({$rowCount} in {$queryTime})",
                "noDataMessage": "Found no matching events.",
                "noDataMessageStyle": 2,
                "timeContext": {
                  "durationMs": 14400000
                },
                "timeContextFromParameter": "TimeRange",
                "queryType": 0,
                "resourceType": "microsoft.operationalinsights/workspaces",
                "crossComponentResources": [
                  "{Workspaces}"
                ],
                "gridSettings": {
                  "rowLimit": 10000,
                  "filter": true
                }
              },
              "conditionalVisibility": {
                "parameterName": "selectedNetRuleTab",
                "comparison": "isEqualTo",
                "value": "ThreatIntel"
              }
            }
          ]
        },
        "conditionalVisibility": {
          "parameterName": "selectedTab",
          "comparison": "isEqualTo",
          "value": "AFNetRule"
        }
      },
      {
        "type": 12,
        "name": "AFDnsProxyGroup",
        "content": {
          "version": "NotebookGroup/1.0",
          "groupType": "editable",
          "items": [
            {
              "type": 11,
              "name": "DnsProxyLinks",
              "content": {
                "version": "LinkItem/1.0",
                "style": "tabs",
                "links": [
                  {
                    "id": "8bbc4316-cd19-4afb-a4f7-dc478306057f",
                    "cellValue": "selectedDnsProxyTab",
                    "linkTarget": "parameter",
                    "linkLabel": "Search",
                    "subTarget": "Search",
                    "style": "link"
                  },
                  {
                    "id": "8772d239-7029-478e-82bd-ebf7044a40c7",
                    "cellValue": "selectedDnsProxyTab",
                    "linkTarget": "parameter",
                    "linkLabel": "Statistics",
                    "subTarget": "Statistics",
                    "style": "link"
                  }
                ]
              }
            },
            {
              "type": 3,
              "name": "AFDnsProxySelectedClientQuery",
              "customWidth": "50",
              "content": {
                "version": "KqlItem/1.0",
                "query": "AzureDiagnostics | where ResourceType == 'AZUREFIREWALLS' and Category == 'AzureFirewallDnsProxy' and OperationName == 'AzureFirewallDnsProxyLog' | where ('{Resource:label}' !has ',' and Resource =~ '{Resource:label}') or ('{Resource:label}' has ',' and Resource in~ (split('{Resource:label}', ', '))) | parse msg_s with 'DNS Request: ' Client ':' ClientPort ' - ' QueryID ' ' RequestType ' ' RequestClass ' ' RequestName '. ' Protocol ' ' RequestSize ' ' EDNS0_DO ' ' EDNS0_Buffersize ' ' ResponseCode ' ' ResponseFlags ' ' ResponseSize ' ' ResponseDuration | join kind=leftouter (AzureNetworkAnalytics_CL | where SubType_s == 'Topology' and ResourceType in ('NetworkInterface', 'ApplicationGateway', 'VirtualNetworkGateway', 'LoadBalancer') | extend RGandName = split(iif(ResourceType == 'NetworkInterface' and isnotnull(VirtualMachine_s), VirtualMachine_s, Name_s), '/') | extend IPResourceId = strcat('/subscriptions/', Subscription_g, '/resourceGroups/', RGandName[0], '/providers/', iif(ResourceType == 'NetworkInterface' and isnotnull(VirtualMachine_s), 'Microsoft.Compute/virtualMachines/', strcat('Microsoft.Network/', ResourceType, 's/')), RGandName[1]) | extend IP = pack_array(PrivateFrontendIPs_s, PublicFrontendIPs_s, VIPAddress_s, PrivateIPAddresses_s, PublicIPAddresses_s, PublicIPs_s) | mv-expand IP | where isnotempty(IP) | summarize by IPResourceId, tostring(IP)) on $left.Client == $right.IP | summarize Hits = count() by Client, IPResourceId | project Hits, Client, Resource = IPResourceId | sort by Hits desc",
                "size": 1,
                "showAnalytics": true,
                "showExportToExcel": true,
                "title": "Select client ({$rowCount} in {$queryTime})",
                "noDataMessage": "Found no matching events.",
                "noDataMessageStyle": 2,
                "timeContext": {
                  "durationMs": 14400000
                },
                "timeContextFromParameter": "TimeRange",
                "exportMultipleValues": true,
                "exportedParameters": [
                  {
                    "fieldName": "Client",
                    "parameterName": "SelectedClient",
                    "parameterType": 1,
                    "quote": "",
                    "delimiter": ","
                  }
                ],
                "queryType": 0,
                "resourceType": "microsoft.operationalinsights/workspaces",
                "crossComponentResources": [
                  "{Workspaces}"
                ],
                "gridSettings": {
                  "formatters": [
                    {
                      "columnMatch": "Hits",
                      "formatter": 8,
                      "formatOptions": {
                        "palette": "whiteBlack"
                      },
                      "numberFormat": {
                        "unit": 17,
                        "options": {
                          "style": "decimal",
                          "useGrouping": false,
                          "maximumSignificantDigits": 4
                        }
                      }
                    }
                  ],
                  "rowLimit": 10000,
                  "filter": true
                }
              }
            },
            {
              "type": 3,
              "name": "AFDnsProxySelectedRequestNameQuery",
              "customWidth": "50",
              "content": {
                "version": "KqlItem/1.0",
                "query": "AzureDiagnostics | where ResourceType == 'AZUREFIREWALLS' and Category == 'AzureFirewallDnsProxy' and OperationName == 'AzureFirewallDnsProxyLog' | where ('{Resource:label}' !has ',' and Resource =~ '{Resource:label}') or ('{Resource:label}' has ',' and Resource in~ (split('{Resource:label}', ', '))) | parse msg_s with 'DNS Request: ' Client ':' ClientPort ' - ' QueryID ' ' RequestType ' ' RequestClass ' ' RequestName '. ' Protocol ' ' RequestSize ' ' EDNS0_DO ' ' EDNS0_Buffersize ' ' ResponseCode ' ' ResponseFlags ' ' ResponseSize ' ' ResponseDuration | where isempty('{SelectedClient}') or ('{SelectedClient}' !has ',' and Client =~ '{SelectedClient}') or ('{SelectedClient}' has ',' and Client in~ (split('{SelectedClient}', ','))) | summarize Hits = count() by RequestName | project Hits, RequestName | sort by Hits desc",
                "size": 1,
                "showAnalytics": true,
                "showExportToExcel": true,
                "title": "Select request name ({$rowCount} in {$queryTime})",
                "noDataMessage": "Found no matching events.",
                "noDataMessageStyle": 2,
                "timeContext": {
                  "durationMs": 14400000
                },
                "timeContextFromParameter": "TimeRange",
                "exportMultipleValues": true,
                "exportedParameters": [
                  {
                    "fieldName": "RequestName",
                    "parameterName": "SelectedRequestName",
                    "parameterType": 1,
                    "quote": "",
                    "delimiter": ","
                  }
                ],
                "queryType": 0,
                "resourceType": "microsoft.operationalinsights/workspaces",
                "crossComponentResources": [
                  "{Workspaces}"
                ],
                "gridSettings": {
                  "formatters": [
                    {
                      "columnMatch": "Hits",
                      "formatter": 8,
                      "formatOptions": {
                        "palette": "whiteBlack"
                      },
                      "numberFormat": {
                        "unit": 17,
                        "options": {
                          "style": "decimal",
                          "useGrouping": false,
                          "maximumSignificantDigits": 4
                        }
                      }
                    }
                  ],
                  "rowLimit": 10000,
                  "filter": true
                }
              }
            },
            {
              "type": 9,
              "name": "DnsProxyLogSearchParameters",
              "content": {
                "version": "KqlParameterItem/1.0",
                "parameters": [
                  {
                    "id": "2c7f8035-b3e4-4b68-a760-b54409866544",
                    "version": "KqlParameterItem/1.0",
                    "name": "AFClientPort",
                    "label": "ClientPort",
                    "type": 1,
                    "timeContext": {
                      "durationMs": 0
                    },
                    "timeContextFromParameter": "TimeRange",
                    "defaultValue": ""
                  },
                  {
                    "id": "fdb6569c-39a5-4250-971f-8cea4f6bd705",
                    "version": "KqlParameterItem/1.0",
                    "name": "AFRequestType",
                    "label": "RequestType",
                    "type": 2,
                    "isRequired": true,
                    "query": "AzureDiagnostics | where ResourceType == 'AZUREFIREWALLS' and Category == 'AzureFirewallDnsProxy' and OperationName == 'AzureFirewallDnsProxyLog' | where ('{Resource:label}' !has ',' and Resource =~ '{Resource:label}') or ('{Resource:label}' has ',' and Resource in~ (split('{Resource:label}', ', '))) | parse msg_s with 'DNS Request: ' Client ':' ClientPort ' - ' QueryID ' ' RequestType ' ' RequestClass ' ' RequestName '. ' Protocol ' ' RequestSize ' ' EDNS0_DO ' ' EDNS0_Buffersize ' ' ResponseCode ' ' ResponseFlags ' ' ResponseSize ' ' ResponseDuration | summarize by RequestType | sort by RequestType asc",
                    "typeSettings": {
                      "additionalResourceOptions": [
                        "value::all"
                      ],
                      "selectAllValue": "All",
                      "showDefault": false
                    },
                    "timeContext": {
                      "durationMs": 14400000
                    },
                    "timeContextFromParameter": "TimeRange",
                    "defaultValue": "value::all",
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "crossComponentResources": [
                      "{Workspaces}"
                    ]
                  },
                  {
                    "id": "c78cff97-e8a6-4c47-ba2a-3ebb50e598ec",
                    "version": "KqlParameterItem/1.0",
                    "name": "AFRequestClass",
                    "label": "RequestClass",
                    "type": 2,
                    "isRequired": true,
                    "query": "AzureDiagnostics | where ResourceType == 'AZUREFIREWALLS' and Category == 'AzureFirewallDnsProxy' and OperationName == 'AzureFirewallDnsProxyLog' | where ('{Resource:label}' !has ',' and Resource =~ '{Resource:label}') or ('{Resource:label}' has ',' and Resource in~ (split('{Resource:label}', ', '))) | parse msg_s with 'DNS Request: ' Client ':' ClientPort ' - ' QueryID ' ' RequestType ' ' RequestClass ' ' RequestName '. ' Protocol ' ' RequestSize ' ' EDNS0_DO ' ' EDNS0_Buffersize ' ' ResponseCode ' ' ResponseFlags ' ' ResponseSize ' ' ResponseDuration | summarize by RequestClass | sort by RequestClass asc",
                    "typeSettings": {
                      "additionalResourceOptions": [
                        "value::all"
                      ],
                      "selectAllValue": "All",
                      "showDefault": false
                    },
                    "timeContext": {
                      "durationMs": 14400000
                    },
                    "timeContextFromParameter": "TimeRange",
                    "defaultValue": "value::all",
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "crossComponentResources": [
                      "{Workspaces}"
                    ]
                  },
                  {
                    "id": "8740b6d2-b686-41bb-9a2f-3dfd14693eb4",
                    "version": "KqlParameterItem/1.0",
                    "name": "AFProtocol",
                    "label": "Protocol",
                    "type": 2,
                    "isRequired": true,
                    "query": "AzureDiagnostics | where ResourceType == 'AZUREFIREWALLS' and Category == 'AzureFirewallDnsProxy' and OperationName == 'AzureFirewallDnsProxyLog' | where ('{Resource:label}' !has ',' and Resource =~ '{Resource:label}') or ('{Resource:label}' has ',' and Resource in~ (split('{Resource:label}', ', '))) | parse msg_s with 'DNS Request: ' Client ':' ClientPort ' - ' QueryID ' ' RequestType ' ' RequestClass ' ' RequestName '. ' Protocol ' ' RequestSize ' ' EDNS0_DO ' ' EDNS0_Buffersize ' ' ResponseCode ' ' ResponseFlags ' ' ResponseSize ' ' ResponseDuration | summarize by Protocol | sort by Protocol asc",
                    "typeSettings": {
                      "additionalResourceOptions": [
                        "value::all"
                      ],
                      "selectAllValue": "All",
                      "showDefault": false
                    },
                    "timeContext": {
                      "durationMs": 14400000
                    },
                    "timeContextFromParameter": "TimeRange",
                    "defaultValue": "value::all",
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "crossComponentResources": [
                      "{Workspaces}"
                    ]
                  }
                ],
                "style": "pills",
                "queryType": 0,
                "resourceType": "microsoft.operationalinsights/workspaces"
              },
              "conditionalVisibility": {
                "parameterName": "selectedDnsProxyTab",
                "comparison": "isEqualTo",
                "value": "Search"
              }
            },
            {
              "type": 3,
              "name": "DnsProxySearchQuery",
              "content": {
                "version": "KqlItem/1.0",
                "query": "AzureDiagnostics | where ResourceType == 'AZUREFIREWALLS' and Category == 'AzureFirewallDnsProxy' and OperationName == 'AzureFirewallDnsProxyLog' | where ('{Resource:label}' !has ',' and Resource =~ '{Resource:label}') or ('{Resource:label}' has ',' and Resource in~ (split('{Resource:label}', ', '))) | parse msg_s with 'DNS Request: ' Client ':' ClientPort ' - ' QueryID ' ' RequestType ' ' RequestClass ' ' RequestName '. ' Protocol ' ' RequestSize ' ' EDNS0_DO ' ' EDNS0_Buffersize ' ' ResponseCode ' ' ResponseFlags ' ' ResponseSize ' ' ResponseDuration | where isempty('{SelectedClient}') or ('{SelectedClient}' !has ',' and Client =~ '{SelectedClient}') or ('{SelectedClient}' has ',' and Client in~ (split('{SelectedClient}', ','))) | where isempty('{SelectedRequestName}') or ('{SelectedRequestName}' !has ',' and RequestName =~ '{SelectedRequestName}') or ('{SelectedRequestName}' has ',' and RequestName in~ (split('{SelectedRequestName}', ','))) | where '{AFClientPort}' == '' or ClientPort == '{AFClientPort:label}' | where '{AFRequestType:label}' == 'All' or RequestType == '{AFRequestType:label}' | where '{AFRequestClass:label}' == 'All' or RequestClass == '{AFRequestClass:label}' | where '{AFProtocol:label}' == 'All' or Protocol == '{AFProtocol:label}' | summarize by TimeGenerated, Firewall = Resource, Client, ClientPort, RequestType, RequestClass, RequestName, Protocol, QueryID, RequestSize, EDNS0_DO, EDNS0_Buffersize, ResponseCode, ResponseFlags, ResponseSize, ResponseDuration, LogMessage = msg_s | sort by TimeGenerated desc",
                "size": 2,
                "showAnalytics": true,
                "showExportToExcel": true,
                "title": "Firewall DNS proxy log ({$rowCount} in {$queryTime})",
                "noDataMessage": "Found no matching events.",
                "noDataMessageStyle": 2,
                "timeContext": {
                  "durationMs": 14400000
                },
                "timeContextFromParameter": "TimeRange",
                "queryType": 0,
                "resourceType": "microsoft.operationalinsights/workspaces",
                "crossComponentResources": [
                  "{Workspaces}"
                ],
                "gridSettings": {
                  "rowLimit": 10000,
                  "filter": true
                }
              },
              "conditionalVisibility": {
                "parameterName": "selectedDnsProxyTab",
                "comparison": "isEqualTo",
                "value": "Search"
              }
            },
            {
              "type": 3,
              "name": "AFDnsProxyFirewallPieQuery",
              "customWidth": "25",
              "content": {
                "version": "KqlItem/1.0",
                "query": "AzureDiagnostics | where ResourceType == 'AZUREFIREWALLS' and Category == 'AzureFirewallDnsProxy' and OperationName == 'AzureFirewallDnsProxyLog' | where ('{Resource:label}' !has ',' and Resource =~ '{Resource:label}') or ('{Resource:label}' has ',' and Resource in~ (split('{Resource:label}', ', '))) | parse msg_s with 'DNS Request: ' Client ':' ClientPort ' - ' QueryID ' ' RequestType ' ' RequestClass ' ' RequestName '. ' Protocol ' ' RequestSize ' ' EDNS0_DO ' ' EDNS0_Buffersize ' ' ResponseCode ' ' ResponseFlags ' ' ResponseSize ' ' ResponseDuration | where isempty('{SelectedClient}') or ('{SelectedClient}' !has ',' and Client =~ '{SelectedClient}') or ('{SelectedClient}' has ',' and Client in~ (split('{SelectedClient}', ','))) | where isempty('{SelectedRequestName}') or ('{SelectedRequestName}' !has ',' and RequestName =~ '{SelectedRequestName}') or ('{SelectedRequestName}' has ',' and RequestName in~ (split('{SelectedRequestName}', ','))) | summarize Hits = count() by Resource | project Hits, Firewall = Resource | sort by Hits",
                "size": 0,
                "showAnalytics": true,
                "title": "Hits by firewall ({$rowCount} in {$queryTime})",
                "noDataMessage": "Found no matching events.",
                "noDataMessageStyle": 2,
                "timeContext": {
                  "durationMs": 0
                },
                "timeContextFromParameter": "TimeRange",
                "queryType": 0,
                "resourceType": "microsoft.operationalinsights/workspaces",
                "crossComponentResources": [
                  "{Workspaces}"
                ],
                "visualization": "piechart"
              },
              "conditionalVisibility": {
                "parameterName": "selectedDnsProxyTab",
                "comparison": "isEqualTo",
                "value": "Statistics"
              }
            },
            {
              "type": 3,
              "name": "AFDnsProxyClientPieQuery",
              "customWidth": "25",
              "content": {
                "version": "KqlItem/1.0",
                "query": "AzureDiagnostics | where ResourceType == 'AZUREFIREWALLS' and Category == 'AzureFirewallDnsProxy' and OperationName == 'AzureFirewallDnsProxyLog' | where ('{Resource:label}' !has ',' and Resource =~ '{Resource:label}') or ('{Resource:label}' has ',' and Resource in~ (split('{Resource:label}', ', '))) | parse msg_s with 'DNS Request: ' Client ':' ClientPort ' - ' QueryID ' ' RequestType ' ' RequestClass ' ' RequestName '. ' Protocol ' ' RequestSize ' ' EDNS0_DO ' ' EDNS0_Buffersize ' ' ResponseCode ' ' ResponseFlags ' ' ResponseSize ' ' ResponseDuration | where isempty('{SelectedClient}') or ('{SelectedClient}' !has ',' and Client =~ '{SelectedClient}') or ('{SelectedClient}' has ',' and Client in~ (split('{SelectedClient}', ','))) | where isempty('{SelectedRequestName}') or ('{SelectedRequestName}' !has ',' and RequestName =~ '{SelectedRequestName}') or ('{SelectedRequestName}' has ',' and RequestName in~ (split('{SelectedRequestName}', ','))) | summarize Hits = count() by Client | project Hits, Client | sort by Hits",
                "size": 0,
                "showAnalytics": true,
                "title": "Hits by client ({$rowCount} in {$queryTime})",
                "noDataMessage": "Found no matching events.",
                "noDataMessageStyle": 2,
                "timeContext": {
                  "durationMs": 0
                },
                "timeContextFromParameter": "TimeRange",
                "queryType": 0,
                "resourceType": "microsoft.operationalinsights/workspaces",
                "crossComponentResources": [
                  "{Workspaces}"
                ],
                "visualization": "piechart"
              },
              "conditionalVisibility": {
                "parameterName": "selectedDnsProxyTab",
                "comparison": "isEqualTo",
                "value": "Statistics"
              }
            },
            {
              "type": 3,
              "name": "AFDnsProxyProtocolPieQuery",
              "customWidth": "25",
              "content": {
                "version": "KqlItem/1.0",
                "query": "AzureDiagnostics | where ResourceType == 'AZUREFIREWALLS' and Category == 'AzureFirewallDnsProxy' and OperationName == 'AzureFirewallDnsProxyLog' | where ('{Resource:label}' !has ',' and Resource =~ '{Resource:label}') or ('{Resource:label}' has ',' and Resource in~ (split('{Resource:label}', ', '))) | parse msg_s with 'DNS Request: ' Client ':' ClientPort ' - ' QueryID ' ' RequestType ' ' RequestClass ' ' RequestName '. ' Protocol ' ' RequestSize ' ' EDNS0_DO ' ' EDNS0_Buffersize ' ' ResponseCode ' ' ResponseFlags ' ' ResponseSize ' ' ResponseDuration | where isempty('{SelectedClient}') or ('{SelectedClient}' !has ',' and Client =~ '{SelectedClient}') or ('{SelectedClient}' has ',' and Client in~ (split('{SelectedClient}', ','))) | where isempty('{SelectedRequestName}') or ('{SelectedRequestName}' !has ',' and RequestName =~ '{SelectedRequestName}') or ('{SelectedRequestName}' has ',' and RequestName in~ (split('{SelectedRequestName}', ','))) | summarize Hits = count() by Protocol | project Hits, Protocol | sort by Hits desc",
                "size": 0,
                "showAnalytics": true,
                "title": "Hits by protocol ({$rowCount} in {$queryTime})",
                "noDataMessage": "Found no matching events.",
                "noDataMessageStyle": 2,
                "timeContext": {
                  "durationMs": 0
                },
                "timeContextFromParameter": "TimeRange",
                "queryType": 0,
                "resourceType": "microsoft.operationalinsights/workspaces",
                "crossComponentResources": [
                  "{Workspaces}"
                ],
                "visualization": "piechart"
              },
              "conditionalVisibility": {
                "parameterName": "selectedDnsProxyTab",
                "comparison": "isEqualTo",
                "value": "Statistics"
              }
            },
            {
              "type": 3,
              "name": "AFDnsProxyReqNamePieQuery",
              "customWidth": "25",
              "content": {
                "version": "KqlItem/1.0",
                "query": "AzureDiagnostics | where ResourceType == 'AZUREFIREWALLS' and Category == 'AzureFirewallDnsProxy' and OperationName == 'AzureFirewallDnsProxyLog' | where ('{Resource:label}' !has ',' and Resource =~ '{Resource:label}') or ('{Resource:label}' has ',' and Resource in~ (split('{Resource:label}', ', '))) | parse msg_s with 'DNS Request: ' Client ':' ClientPort ' - ' QueryID ' ' RequestType ' ' RequestClass ' ' RequestName '. ' Protocol ' ' RequestSize ' ' EDNS0_DO ' ' EDNS0_Buffersize ' ' ResponseCode ' ' ResponseFlags ' ' ResponseSize ' ' ResponseDuration | where isempty('{SelectedClient}') or ('{SelectedClient}' !has ',' and Client =~ '{SelectedClient}') or ('{SelectedClient}' has ',' and Client in~ (split('{SelectedClient}', ','))) | where isempty('{SelectedRequestName}') or ('{SelectedRequestName}' !has ',' and RequestName =~ '{SelectedRequestName}') or ('{SelectedRequestName}' has ',' and RequestName in~ (split('{SelectedRequestName}', ','))) | summarize Hits = count() by RequestName | project Hits, RequestName | sort by Hits desc",
                "size": 0,
                "showAnalytics": true,
                "title": "Hits by RequestName ({$rowCount} in {$queryTime})",
                "noDataMessage": "Found no matching events.",
                "noDataMessageStyle": 2,
                "timeContext": {
                  "durationMs": 0
                },
                "timeContextFromParameter": "TimeRange",
                "queryType": 0,
                "resourceType": "microsoft.operationalinsights/workspaces",
                "crossComponentResources": [
                  "{Workspaces}"
                ],
                "visualization": "piechart"
              },
              "conditionalVisibility": {
                "parameterName": "selectedDnsProxyTab",
                "comparison": "isEqualTo",
                "value": "Statistics"
              }
            },
            {
              "type": 3,
              "name": "AFDnsProxyReqClassPieQuery",
              "customWidth": "25",
              "content": {
                "version": "KqlItem/1.0",
                "query": "AzureDiagnostics | where ResourceType == 'AZUREFIREWALLS' and Category == 'AzureFirewallDnsProxy' and OperationName == 'AzureFirewallDnsProxyLog' | where ('{Resource:label}' !has ',' and Resource =~ '{Resource:label}') or ('{Resource:label}' has ',' and Resource in~ (split('{Resource:label}', ', '))) | parse msg_s with 'DNS Request: ' Client ':' ClientPort ' - ' QueryID ' ' RequestType ' ' RequestClass ' ' RequestName '. ' Protocol ' ' RequestSize ' ' EDNS0_DO ' ' EDNS0_Buffersize ' ' ResponseCode ' ' ResponseFlags ' ' ResponseSize ' ' ResponseDuration | where isempty('{SelectedClient}') or ('{SelectedClient}' !has ',' and Client =~ '{SelectedClient}') or ('{SelectedClient}' has ',' and Client in~ (split('{SelectedClient}', ','))) | where isempty('{SelectedRequestName}') or ('{SelectedRequestName}' !has ',' and RequestName =~ '{SelectedRequestName}') or ('{SelectedRequestName}' has ',' and RequestName in~ (split('{SelectedRequestName}', ',')))  | summarize Hits = count() by RequestClass | project Hits, RequestClass | sort by Hits desc",
                "size": 0,
                "showAnalytics": true,
                "title": "Hits by request class ({$rowCount} in {$queryTime})",
                "noDataMessage": "Found no matching events.",
                "noDataMessageStyle": 2,
                "timeContext": {
                  "durationMs": 0
                },
                "timeContextFromParameter": "TimeRange",
                "queryType": 0,
                "resourceType": "microsoft.operationalinsights/workspaces",
                "crossComponentResources": [
                  "{Workspaces}"
                ],
                "visualization": "piechart"
              },
              "conditionalVisibility": {
                "parameterName": "selectedDnsProxyTab",
                "comparison": "isEqualTo",
                "value": "Statistics"
              }
            },
            {
              "type": 3,
              "name": "AFDnsProxyRequestTypePieQuery",
              "customWidth": "25",
              "content": {
                "version": "KqlItem/1.0",
                "query": "AzureDiagnostics | where ResourceType == 'AZUREFIREWALLS' and Category == 'AzureFirewallDnsProxy' and OperationName == 'AzureFirewallDnsProxyLog' | where ('{Resource:label}' !has ',' and Resource =~ '{Resource:label}') or ('{Resource:label}' has ',' and Resource in~ (split('{Resource:label}', ', '))) | parse msg_s with 'DNS Request: ' Client ':' ClientPort ' - ' QueryID ' ' RequestType ' ' RequestClass ' ' RequestName '. ' Protocol ' ' RequestSize ' ' EDNS0_DO ' ' EDNS0_Buffersize ' ' ResponseCode ' ' ResponseFlags ' ' ResponseSize ' ' ResponseDuration | where isempty('{SelectedClient}') or ('{SelectedClient}' !has ',' and Client =~ '{SelectedClient}') or ('{SelectedClient}' has ',' and Client in~ (split('{SelectedClient}', ','))) | where isempty('{SelectedRequestName}') or ('{SelectedRequestName}' !has ',' and RequestName =~ '{SelectedRequestName}') or ('{SelectedRequestName}' has ',' and RequestName in~ (split('{SelectedRequestName}', ','))) | summarize Hits = count() by RequestType | project Hits, RequestType | sort by Hits",
                "size": 0,
                "showAnalytics": true,
                "title": "Hits by request type ({$rowCount} in {$queryTime})",
                "noDataMessage": "Found no matching events.",
                "noDataMessageStyle": 2,
                "timeContext": {
                  "durationMs": 0
                },
                "timeContextFromParameter": "TimeRange",
                "queryType": 0,
                "resourceType": "microsoft.operationalinsights/workspaces",
                "crossComponentResources": [
                  "{Workspaces}"
                ],
                "visualization": "piechart"
              },
              "conditionalVisibility": {
                "parameterName": "selectedDnsProxyTab",
                "comparison": "isEqualTo",
                "value": "Statistics"
              }
            },
            {
              "type": 3,
              "name": "AFDnsProxyResponseCodePieQuery",
              "customWidth": "25",
              "content": {
                "version": "KqlItem/1.0",
                "query": "AzureDiagnostics | where ResourceType == 'AZUREFIREWALLS' and Category == 'AzureFirewallDnsProxy' and OperationName == 'AzureFirewallDnsProxyLog' | where ('{Resource:label}' !has ',' and Resource =~ '{Resource:label}') or ('{Resource:label}' has ',' and Resource in~ (split('{Resource:label}', ', '))) | parse msg_s with 'DNS Request: ' Client ':' ClientPort ' - ' QueryID ' ' RequestType ' ' RequestClass ' ' RequestName '. ' Protocol ' ' RequestSize ' ' EDNS0_DO ' ' EDNS0_Buffersize ' ' ResponseCode ' ' ResponseFlags ' ' ResponseSize ' ' ResponseDuration | where isempty('{SelectedClient}') or ('{SelectedClient}' !has ',' and Client =~ '{SelectedClient}') or ('{SelectedClient}' has ',' and Client in~ (split('{SelectedClient}', ','))) | where isempty('{SelectedRequestName}') or ('{SelectedRequestName}' !has ',' and RequestName =~ '{SelectedRequestName}') or ('{SelectedRequestName}' has ',' and RequestName in~ (split('{SelectedRequestName}', ','))) | summarize Hits = count() by ResponseCode | project Hits, ResponseCode | sort by Hits",
                "size": 0,
                "showAnalytics": true,
                "title": "Hits by response code ({$rowCount} in {$queryTime})",
                "noDataMessage": "Found no matching events.",
                "noDataMessageStyle": 2,
                "timeContext": {
                  "durationMs": 0
                },
                "timeContextFromParameter": "TimeRange",
                "queryType": 0,
                "resourceType": "microsoft.operationalinsights/workspaces",
                "crossComponentResources": [
                  "{Workspaces}"
                ],
                "visualization": "piechart"
              },
              "conditionalVisibility": {
                "parameterName": "selectedDnsProxyTab",
                "comparison": "isEqualTo",
                "value": "Statistics"
              }
            },
            {
              "type": 3,
              "name": "AFDnsProxyFirewallTimeQuery",
              "content": {
                "version": "KqlItem/1.0",
                "query": "AzureDiagnostics | where ResourceType == 'AZUREFIREWALLS' and Category == 'AzureFirewallDnsProxy' and OperationName == 'AzureFirewallDnsProxyLog' | where ('{Resource:label}' !has ',' and Resource =~ '{Resource:label}') or ('{Resource:label}' has ',' and Resource in~ (split('{Resource:label}', ', '))) | parse msg_s with 'DNS Request: ' Client ':' ClientPort ' - ' QueryID ' ' RequestType ' ' RequestClass ' ' RequestName '. ' Protocol ' ' RequestSize ' ' EDNS0_DO ' ' EDNS0_Buffersize ' ' ResponseCode ' ' ResponseFlags ' ' ResponseSize ' ' ResponseDuration | where isempty('{SelectedClient}') or ('{SelectedClient}' !has ',' and Client =~ '{SelectedClient}') or ('{SelectedClient}' has ',' and Client in~ (split('{SelectedClient}', ','))) | where isempty('{SelectedRequestName}') or ('{SelectedRequestName}' !has ',' and RequestName =~ '{SelectedRequestName}') or ('{SelectedRequestName}' has ',' and RequestName in~ (split('{SelectedRequestName}', ','))) | summarize Hits = count() by Firewall = Resource, bin(TimeGenerated, {TimeRange:grain})",
                "size": 0,
                "showAnalytics": true,
                "title": "Hits by firewall ({$rowCount} in {$queryTime})",
                "noDataMessage": "Found no matching events.",
                "noDataMessageStyle": 2,
                "timeContext": {
                  "durationMs": 0
                },
                "timeContextFromParameter": "TimeRange",
                "queryType": 0,
                "resourceType": "microsoft.operationalinsights/workspaces",
                "crossComponentResources": [
                  "{Workspaces}"
                ],
                "visualization": "linechart"
              },
              "conditionalVisibility": {
                "parameterName": "selectedDnsProxyTab",
                "comparison": "isEqualTo",
                "value": "Statistics"
              }
            }
          ]
        },
        "conditionalVisibility": {
          "parameterName": "selectedTab",
          "comparison": "isEqualTo",
          "value": "AFDNSProxy"
        }
      },
      {
        "type": 12,
        "name": "AFIDSGroup",
        "content": {
          "version": "NotebookGroup/1.0",
          "groupType": "editable",
          "items": [
            {
              "type": 11,
              "name": "IDSLinks",
              "content": {
                "version": "LinkItem/1.0",
                "style": "tabs",
                "links": [
                  {
                    "id": "169619bf-caf1-4d2a-b0a2-e1806c197cff",
                    "cellValue": "selectedIDSTab",
                    "linkTarget": "parameter",
                    "linkLabel": "Search",
                    "subTarget": "Search",
                    "style": "link"
                  },
                  {
                    "id": "c086e5aa-9b1f-437d-8606-eca94903b587",
                    "cellValue": "selectedIDSTab",
                    "linkTarget": "parameter",
                    "linkLabel": "Statistics",
                    "subTarget": "Statistics",
                    "style": "link"
                  }
                ]
              }
            },
            {
              "type": 3,
              "name": "AFIDSSelectedSourceQuery",
              "customWidth": "30",
              "content": {
                "version": "KqlItem/1.0",
                "query": "AzureDiagnostics | where ResourceType == 'AZUREFIREWALLS' and OperationName == 'AzureFirewallIDSLog' | where ('{Resource:label}' !has ',' and Resource =~ '{Resource:label}') or ('{Resource:label}' has ',' and Resource in~ (split('{Resource:label}', ', '))) | parse msg_s with Protocol ' request from ' Source ':' SourcePort ' to ' Destination ':' DestinationPort '. Action: ' Action '. Signature: ' Signature '. IDS:' Message '. Priority:' Priority '. Classification:' Classification | join kind=leftouter (AzureNetworkAnalytics_CL | where SubType_s == 'Topology' and ResourceType in ('NetworkInterface', 'ApplicationGateway', 'VirtualNetworkGateway', 'LoadBalancer') | extend RGandName = split(iif(ResourceType == 'NetworkInterface' and isnotnull(VirtualMachine_s), VirtualMachine_s, Name_s), '/') | extend IPResourceId = strcat('/subscriptions/', Subscription_g, '/resourceGroups/', RGandName[0], '/providers/', iif(ResourceType == 'NetworkInterface' and isnotnull(VirtualMachine_s), 'Microsoft.Compute/virtualMachines/', strcat('Microsoft.Network/', ResourceType, 's/')), RGandName[1]) | extend IP = pack_array(PrivateFrontendIPs_s, PublicFrontendIPs_s, VIPAddress_s, PrivateIPAddresses_s, PublicIPAddresses_s, PublicIPs_s) | mv-expand IP | where isnotempty(IP) | summarize by IPResourceId, tostring(IP)) on $left.Source == $right.IP | summarize Hits = count() by Source, IPResourceId | project Hits, Source, Resource = IPResourceId | sort by Hits desc",
                "size": 1,
                "showAnalytics": true,
                "showExportToExcel": true,
                "title": "Select source ({$rowCount} in {$queryTime})",
                "noDataMessage": "Found no matching events.",
                "noDataMessageStyle": 2,
                "timeContext": {
                  "durationMs": 14400000
                },
                "timeContextFromParameter": "TimeRange",
                "exportMultipleValues": true,
                "exportedParameters": [
                  {
                    "fieldName": "Source",
                    "parameterName": "SelectedSource",
                    "parameterType": 1,
                    "quote": "",
                    "delimiter": ","
                  }
                ],
                "queryType": 0,
                "resourceType": "microsoft.operationalinsights/workspaces",
                "crossComponentResources": [
                  "{Workspaces}"
                ],
                "gridSettings": {
                  "formatters": [
                    {
                      "columnMatch": "Hits",
                      "formatter": 8,
                      "formatOptions": {
                        "palette": "whiteBlack"
                      },
                      "numberFormat": {
                        "unit": 17,
                        "options": {
                          "style": "decimal",
                          "useGrouping": false,
                          "maximumSignificantDigits": 4
                        }
                      }
                    }
                  ],
                  "rowLimit": 10000,
                  "filter": true
                }
              }
            },
            {
              "type": 3,
              "name": "AFIDSSelectedDestinationQuery",
              "customWidth": "30",
              "content": {
                "version": "KqlItem/1.0",
                "query": "AzureDiagnostics | where ResourceType == 'AZUREFIREWALLS' and OperationName == 'AzureFirewallIDSLog' | where ('{Resource:label}' !has ',' and Resource =~ '{Resource:label}') or ('{Resource:label}' has ',' and Resource in~ (split('{Resource:label}', ', '))) | parse msg_s with Protocol ' request from ' Source ':' SourcePort ' to ' Destination ':' DestinationPort '. Action: ' Action '. Signature: ' Signature '. IDS:' Message '. Priority:' Priority '. Classification:' Classification | where isempty('{SelectedSource}') or ('{SelectedSource}' !has ',' and Source =~ '{SelectedSource}') or ('{SelectedSource}' has ',' and Source in~ (split('{SelectedSource}', ','))) | summarize Hits = count() by Destination | project Hits, Destination | sort by Hits desc",
                "size": 1,
                "showAnalytics": true,
                "showExportToExcel": true,
                "title": "Select destination ({$rowCount} in {$queryTime})",
                "noDataMessage": "Found no matching events.",
                "noDataMessageStyle": 2,
                "timeContext": {
                  "durationMs": 14400000
                },
                "timeContextFromParameter": "TimeRange",
                "exportMultipleValues": true,
                "exportedParameters": [
                  {
                    "fieldName": "Destination",
                    "parameterName": "SelectedDestination",
                    "parameterType": 1,
                    "quote": "",
                    "delimiter": ","
                  }
                ],
                "queryType": 0,
                "resourceType": "microsoft.operationalinsights/workspaces",
                "crossComponentResources": [
                  "{Workspaces}"
                ],
                "gridSettings": {
                  "formatters": [
                    {
                      "columnMatch": "Hits",
                      "formatter": 8,
                      "formatOptions": {
                        "palette": "whiteBlack"
                      },
                      "numberFormat": {
                        "unit": 17,
                        "options": {
                          "style": "decimal",
                          "useGrouping": false,
                          "maximumSignificantDigits": 4
                        }
                      }
                    }
                  ],
                  "rowLimit": 10000,
                  "filter": true
                }
              }
            },
            {
              "type": 9,
              "name": "IDSLogSearchParameters",
              "content": {
                "version": "KqlParameterItem/1.0",
                "parameters": [
                  {
                    "id": "50890a80-ca90-46fa-85e2-41d685638282",
                    "version": "KqlParameterItem/1.0",
                    "name": "AFAction",
                    "label": "Action",
                    "type": 10,
                    "isRequired": true,
                    "value": "All",
                    "typeSettings": {
                      "additionalResourceOptions": [],
                      "showDefault": false
                    },
                    "jsonData": "[\"All\",\"Allow\",\"Deny\"]",
                    "timeContext": {
                      "durationMs": 0
                    },
                    "timeContextFromParameter": "TimeRange"
                  },
                  {
                    "id": "6b901d37-d503-47a0-836b-39b09767ee88",
                    "version": "KqlParameterItem/1.0",
                    "name": "AFSourcePort",
                    "label": "SourcePort",
                    "type": 2,
                    "isRequired": true,
                    "query": "AzureDiagnostics | where ResourceType == 'AZUREFIREWALLS' and OperationName == 'AzureFirewallIDSLog' | where ('{Resource:label}' !has ',' and Resource =~ '{Resource:label}') or ('{Resource:label}' has ',' and Resource in~ (split('{Resource:label}', ', '))) | parse msg_s with Protocol ' request from ' Source ':' SourcePort ' to ' Destination ':' DestinationPort '. Action: ' Action '. Signature: ' Signature '. IDS:' Message '. Priority:' Priority '. Classification:' Classification | where isempty('{SelectedSource}') or ('{SelectedSource}' !has ',' and Source =~ '{SelectedSource}') or ('{SelectedSource}' has ',' and Source in~ (split('{SelectedSource}', ','))) | where isempty('{SelectedDestination}') or ('{SelectedDestination}' !has ',' and Destination =~ '{SelectedDestination}') or ('{SelectedDestination}' has ',' and Destination in~ (split('{SelectedDestination}', ','))) | summarize by SourcePort | sort by SourcePort asc",
                    "typeSettings": {
                      "additionalResourceOptions": [
                        "value::all"
                      ],
                      "selectAllValue": "All",
                      "showDefault": false
                    },
                    "timeContext": {
                      "durationMs": 14400000
                    },
                    "timeContextFromParameter": "TimeRange",
                    "defaultValue": "value::all",
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "crossComponentResources": [
                      "{Workspaces}"
                    ]
                  },
                  {
                    "id": "14b3b864-e1b1-4ac9-8c3e-2ab8cb63de3c",
                    "version": "KqlParameterItem/1.0",
                    "name": "AFDestinationPort",
                    "label": "DestinationPort",
                    "type": 2,
                    "isRequired": true,
                    "query": "AzureDiagnostics | where ResourceType == 'AZUREFIREWALLS' and OperationName == 'AzureFirewallIDSLog' | where ('{Resource:label}' !has ',' and Resource =~ '{Resource:label}') or ('{Resource:label}' has ',' and Resource in~ (split('{Resource:label}', ', '))) | parse msg_s with Protocol ' request from ' Source ':' SourcePort ' to ' Destination ':' DestinationPort '. Action: ' Action '. Signature: ' Signature '. IDS:' Message '. Priority:' Priority '. Classification:' Classification | where isempty('{SelectedSource}') or ('{SelectedSource}' !has ',' and Source =~ '{SelectedSource}') or ('{SelectedSource}' has ',' and Source in~ (split('{SelectedSource}', ','))) | where isempty('{SelectedDestination}') or ('{SelectedDestination}' !has ',' and Destination =~ '{SelectedDestination}') or ('{SelectedDestination}' has ',' and Destination in~ (split('{SelectedDestination}', ','))) | summarize by DestinationPort | sort by DestinationPort asc",
                    "typeSettings": {
                      "additionalResourceOptions": [
                        "value::all"
                      ],
                      "selectAllValue": "All",
                      "showDefault": false
                    },
                    "timeContext": {
                      "durationMs": 14400000
                    },
                    "timeContextFromParameter": "TimeRange",
                    "defaultValue": "value::all",
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "crossComponentResources": [
                      "{Workspaces}"
                    ]
                  },
                  {
                    "id": "4bcef6d8-87ad-4d3e-a559-8a88385d34a1",
                    "version": "KqlParameterItem/1.0",
                    "name": "AFProtocol",
                    "label": "Protocol",
                    "type": 2,
                    "isRequired": true,
                    "query": "AzureDiagnostics | where ResourceType == 'AZUREFIREWALLS' and OperationName == 'AzureFirewallIDSLog' | where ('{Resource:label}' !has ',' and Resource =~ '{Resource:label}') or ('{Resource:label}' has ',' and Resource in~ (split('{Resource:label}', ', '))) | parse msg_s with Protocol ' request from ' Source ':' SourcePort ' to ' Destination ':' DestinationPort '. Action: ' Action '. Signature: ' Signature '. IDS:' Message '. Priority:' Priority '. Classification:' Classification | where isempty('{SelectedSource}') or ('{SelectedSource}' !has ',' and Source =~ '{SelectedSource}') or ('{SelectedSource}' has ',' and Source in~ (split('{SelectedSource}', ','))) | where isempty('{SelectedDestination}') or ('{SelectedDestination}' !has ',' and Destination =~ '{SelectedDestination}') or ('{SelectedDestination}' has ',' and Destination in~ (split('{SelectedDestination}', ','))) | summarize by Protocol | sort by Protocol asc",
                    "typeSettings": {
                      "additionalResourceOptions": [
                        "value::all"
                      ],
                      "selectAllValue": "All",
                      "showDefault": false
                    },
                    "timeContext": {
                      "durationMs": 14400000
                    },
                    "timeContextFromParameter": "TimeRange",
                    "defaultValue": "value::all",
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "crossComponentResources": [
                      "{Workspaces}"
                    ]
                  }
                ],
                "style": "pills",
                "queryType": 0,
                "resourceType": "microsoft.operationalinsights/workspaces"
              },
              "conditionalVisibility": {
                "parameterName": "selectedIDSTab",
                "comparison": "isEqualTo",
                "value": "Search"
              }
            },
            {
              "type": 3,
              "name": "IDSSearchQuery",
              "content": {
                "version": "KqlItem/1.0",
                "query": "AzureDiagnostics | where ResourceType == 'AZUREFIREWALLS' and OperationName == 'AzureFirewallIDSLog' | where ('{Resource:label}' !has ',' and Resource =~ '{Resource:label}') or ('{Resource:label}' has ',' and Resource in~ (split('{Resource:label}', ', '))) | parse msg_s with Protocol ' request from ' Source ':' SourcePort ' to ' Destination ':' DestinationPort '. Action: ' Action '. Signature: ' Signature '. IDS:' Message '. Priority:' Priority '. Classification:' Classification | where isempty('{SelectedSource}') or ('{SelectedSource}' !has ',' and Source =~ '{SelectedSource}') or ('{SelectedSource}' has ',' and Source in~ (split('{SelectedSource}', ','))) | where isempty('{SelectedDestination}') or ('{SelectedDestination}' !has ',' and Destination =~ '{SelectedDestination}') or ('{SelectedDestination}' has ',' and Destination in~ (split('{SelectedDestination}', ','))) | where '{AFAction:label}' == 'All' or Action == '{AFAction:label}' | where '{AFSourcePort:label}' == 'All' or SourcePort == '{AFSourcePort:label}' | where '{AFDestinationPort:label}' == 'All' or DestinationPort == '{AFDestinationPort:label}' | where '{AFProtocol:label}' == 'All' or Protocol == '{AFProtocol:label}' | summarize by TimeGenerated, Firewall = Resource, Signature, Message, Priority, Classification, Action, Source, SourcePort, Destination, DestinationPort, Protocol, LogMessage = msg_s | sort by TimeGenerated desc",
                "size": 2,
                "showAnalytics": true,
                "showExportToExcel": true,
                "title": "Firewall intrusion detection and prevention system log ({$rowCount} in {$queryTime})",
                "noDataMessage": "Found no matching events.",
                "noDataMessageStyle": 2,
                "timeContext": {
                  "durationMs": 14400000
                },
                "timeContextFromParameter": "TimeRange",
                "queryType": 0,
                "resourceType": "microsoft.operationalinsights/workspaces",
                "crossComponentResources": [
                  "{Workspaces}"
                ],
                "gridSettings": {
                  "rowLimit": 10000,
                  "filter": true
                }
              },
              "conditionalVisibility": {
                "parameterName": "selectedIDSTab",
                "comparison": "isEqualTo",
                "value": "Search"
              }
            },
            {
              "type": 3,
              "name": "AFIDSPriorityPieQuery",
              "customWidth": "25",
              "content": {
                "version": "KqlItem/1.0",
                "query": "AzureDiagnostics | where ResourceType == 'AZUREFIREWALLS' and OperationName == 'AzureFirewallIDSLog' | where ('{Resource:label}' !has ',' and Resource =~ '{Resource:label}') or ('{Resource:label}' has ',' and Resource in~ (split('{Resource:label}', ', '))) | parse msg_s with Protocol ' request from ' Source ':' SourcePort ' to ' Destination ':' DestinationPort '. Action: ' Action '. Signature: ' Signature '. IDS:' Message '. Priority:' Priority '. Classification:' Classification | where isempty('{SelectedSource}') or ('{SelectedSource}' !has ',' and Source =~ '{SelectedSource}') or ('{SelectedSource}' has ',' and Source in~ (split('{SelectedSource}', ','))) | where isempty('{SelectedDestination}') or ('{SelectedDestination}' !has ',' and Destination =~ '{SelectedDestination}') or ('{SelectedDestination}' has ',' and Destination in~ (split('{SelectedDestination}', ','))) | summarize Hits = count() by Priority | project Hits, Priority | sort by Hits desc",
                "size": 0,
                "showAnalytics": true,
                "title": "Hits by priority ({$rowCount} in {$queryTime})",
                "noDataMessage": "Found no matching events.",
                "noDataMessageStyle": 2,
                "timeContext": {
                  "durationMs": 0
                },
                "timeContextFromParameter": "TimeRange",
                "queryType": 0,
                "resourceType": "microsoft.operationalinsights/workspaces",
                "crossComponentResources": [
                  "{Workspaces}"
                ],
                "visualization": "piechart"
              },
              "conditionalVisibility": {
                "parameterName": "selectedIDSTab",
                "comparison": "isEqualTo",
                "value": "Statistics"
              }
            },
            {
              "type": 3,
              "name": "AFIDSClassificationPieQuery",
              "customWidth": "25",
              "content": {
                "version": "KqlItem/1.0",
                "query": "AzureDiagnostics | where ResourceType == 'AZUREFIREWALLS' and OperationName == 'AzureFirewallIDSLog' | where ('{Resource:label}' !has ',' and Resource =~ '{Resource:label}') or ('{Resource:label}' has ',' and Resource in~ (split('{Resource:label}', ', '))) | parse msg_s with Protocol ' request from ' Source ':' SourcePort ' to ' Destination ':' DestinationPort '. Action: ' Action '. Signature: ' Signature '. IDS:' Message '. Priority:' Priority '. Classification:' Classification | where isempty('{SelectedSource}') or ('{SelectedSource}' !has ',' and Source =~ '{SelectedSource}') or ('{SelectedSource}' has ',' and Source in~ (split('{SelectedSource}', ','))) | where isempty('{SelectedDestination}') or ('{SelectedDestination}' !has ',' and Destination =~ '{SelectedDestination}') or ('{SelectedDestination}' has ',' and Destination in~ (split('{SelectedDestination}', ','))) | summarize Hits = count() by Classification | project Hits, Classification | sort by Hits desc",
                "size": 0,
                "showAnalytics": true,
                "title": "Hits by classification ({$rowCount} in {$queryTime})",
                "noDataMessage": "Found no matching events.",
                "noDataMessageStyle": 2,
                "timeContext": {
                  "durationMs": 0
                },
                "timeContextFromParameter": "TimeRange",
                "queryType": 0,
                "resourceType": "microsoft.operationalinsights/workspaces",
                "crossComponentResources": [
                  "{Workspaces}"
                ],
                "visualization": "piechart"
              },
              "conditionalVisibility": {
                "parameterName": "selectedIDSTab",
                "comparison": "isEqualTo",
                "value": "Statistics"
              }
            },
            {
              "type": 3,
              "name": "AFIDSActionPieQuery",
              "customWidth": "25",
              "content": {
                "version": "KqlItem/1.0",
                "query": "AzureDiagnostics | where ResourceType == 'AZUREFIREWALLS' and OperationName == 'AzureFirewallIDSLog' | where ('{Resource:label}' !has ',' and Resource =~ '{Resource:label}') or ('{Resource:label}' has ',' and Resource in~ (split('{Resource:label}', ', '))) | parse msg_s with Protocol ' request from ' Source ':' SourcePort ' to ' Destination ':' DestinationPort '. Action: ' Action '. Signature: ' Signature '. IDS:' Message '. Priority:' Priority '. Classification:' Classification | where isempty('{SelectedSource}') or ('{SelectedSource}' !has ',' and Source =~ '{SelectedSource}') or ('{SelectedSource}' has ',' and Source in~ (split('{SelectedSource}', ','))) | where isempty('{SelectedDestination}') or ('{SelectedDestination}' !has ',' and Destination =~ '{SelectedDestination}') or ('{SelectedDestination}' has ',' and Destination in~ (split('{SelectedDestination}', ','))) | summarize Hits = count() by Action | project Hits, Action | sort by Hits desc",
                "size": 0,
                "showAnalytics": true,
                "title": "Hits by action ({$rowCount} in {$queryTime})",
                "noDataMessage": "Found no matching events.",
                "noDataMessageStyle": 2,
                "timeContext": {
                  "durationMs": 0
                },
                "timeContextFromParameter": "TimeRange",
                "queryType": 0,
                "resourceType": "microsoft.operationalinsights/workspaces",
                "crossComponentResources": [
                  "{Workspaces}"
                ],
                "visualization": "piechart"
              },
              "conditionalVisibility": {
                "parameterName": "selectedIDSTab",
                "comparison": "isEqualTo",
                "value": "Statistics"
              }
            },
            {
              "type": 3,
              "name": "AFIDSProtocolPieQuery",
              "customWidth": "25",
              "content": {
                "version": "KqlItem/1.0",
                "query": "AzureDiagnostics | where ResourceType == 'AZUREFIREWALLS' and OperationName == 'AzureFirewallIDSLog' | where ('{Resource:label}' !has ',' and Resource =~ '{Resource:label}') or ('{Resource:label}' has ',' and Resource in~ (split('{Resource:label}', ', '))) | parse msg_s with Protocol ' request from ' Source ':' SourcePort ' to ' Destination ':' DestinationPort '. Action: ' Action '. Signature: ' Signature '. IDS:' Message '. Priority:' Priority '. Classification:' Classification | where isempty('{SelectedSource}') or ('{SelectedSource}' !has ',' and Source =~ '{SelectedSource}') or ('{SelectedSource}' has ',' and Source in~ (split('{SelectedSource}', ','))) | where isempty('{SelectedDestination}') or ('{SelectedDestination}' !has ',' and Destination =~ '{SelectedDestination}') or ('{SelectedDestination}' has ',' and Destination in~ (split('{SelectedDestination}', ','))) | summarize Hits = count() by Protocol | project Hits, Protocol | sort by Hits desc",
                "size": 0,
                "showAnalytics": true,
                "title": "Hits by protocol ({$rowCount} in {$queryTime})",
                "noDataMessage": "Found no matching events.",
                "noDataMessageStyle": 2,
                "timeContext": {
                  "durationMs": 0
                },
                "timeContextFromParameter": "TimeRange",
                "queryType": 0,
                "resourceType": "microsoft.operationalinsights/workspaces",
                "crossComponentResources": [
                  "{Workspaces}"
                ],
                "visualization": "piechart"
              },
              "conditionalVisibility": {
                "parameterName": "selectedIDSTab",
                "comparison": "isEqualTo",
                "value": "Statistics"
              }
            },
            {
              "type": 3,
              "name": "AFIDSSignaturePieQuery",
              "customWidth": "25",
              "content": {
                "version": "KqlItem/1.0",
                "query": "AzureDiagnostics | where ResourceType == 'AZUREFIREWALLS' and OperationName == 'AzureFirewallIDSLog' | where ('{Resource:label}' !has ',' and Resource =~ '{Resource:label}') or ('{Resource:label}' has ',' and Resource in~ (split('{Resource:label}', ', '))) | parse msg_s with Protocol ' request from ' Source ':' SourcePort ' to ' Destination ':' DestinationPort '. Action: ' Action '. Signature: ' Signature '. IDS:' Message '. Priority:' Priority '. Classification:' Classification | where isempty('{SelectedSource}') or ('{SelectedSource}' !has ',' and Source =~ '{SelectedSource}') or ('{SelectedSource}' has ',' and Source in~ (split('{SelectedSource}', ','))) | where isempty('{SelectedDestination}') or ('{SelectedDestination}' !has ',' and Destination =~ '{SelectedDestination}') or ('{SelectedDestination}' has ',' and Destination in~ (split('{SelectedDestination}', ','))) | summarize Hits = count() by Signature | project Hits, Signature | sort by Hits desc",
                "size": 0,
                "showAnalytics": true,
                "title": "Hits by Signature ({$rowCount} in {$queryTime})",
                "noDataMessage": "Found no matching events.",
                "noDataMessageStyle": 2,
                "timeContext": {
                  "durationMs": 0
                },
                "timeContextFromParameter": "TimeRange",
                "queryType": 0,
                "resourceType": "microsoft.operationalinsights/workspaces",
                "crossComponentResources": [
                  "{Workspaces}"
                ],
                "visualization": "piechart"
              },
              "conditionalVisibility": {
                "parameterName": "selectedIDSTab",
                "comparison": "isEqualTo",
                "value": "Statistics"
              }
            }
          ]
        },
        "conditionalVisibility": {
          "parameterName": "selectedTab",
          "comparison": "isEqualTo",
          "value": "AFIDSIPS"
        }
      }
    ],
    "fallbackResourceIds": [
      "Azure Monitor"
    ],
    "fromTemplateId": "sentinel-UserWorkbook",
    "$schema": "https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json"
  }
}